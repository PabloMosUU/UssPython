[
    {
        "modules": [
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067b8",
                        "visible": true,
                        "languages": [],
                        "searchString": "Anaconda Setup anaconda setup anacondasetup",
                        "moduleId": "619620e4e5d291b4f060670c",
                        "index": 6,
                        "title": "Anaconda Setup",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-07T11:00:15.325Z",
                        "updatedAt": "2022-03-09T12:34:50.411Z",
                        "__v": 0,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e3d4343c866058b91b1c68f",
                                    "text": "We will use the Anaconda Data Science platform in the course. Anaconda is a free and open source distribution of Python and some other programming languages used in scientific applications. It runs on all major operating systems and provides a number of very useful tools for Python programming.\nHere is what you have to do to get started:\n\n1. Go to https://docs.anaconda.com/anaconda/install/ and follow the installation instructions for your operating system.\n2. Go to https://docs.anaconda.com/anaconda/user-guide/getting-started/#open-nav-lin and follow the instructions how to start Spyder.\n3. Start coding!\n\nIf you have (unresolvable) trouble with the installation of Anaconda on your device, you can use it also via [UU’s MyWorkplace] \n(https://myworkplace.uu.nl/). The app that you need to start is called “Spyder Anaconda3”."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "kat12bmejers3z2qhwjd"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067cb",
                        "visible": true,
                        "languages": [],
                        "searchString": "Number segments number segments numbersegments",
                        "moduleId": "619620e4e5d291b4f060670c",
                        "index": 2,
                        "title": "Number segments",
                        "createdAt": "2019-12-11T10:16:57.367Z",
                        "updatedAt": "2022-02-01T08:29:57.653Z",
                        "__v": 0,
                        "files": [
                            {
                                "label": "Floors",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 988,
                                "cropHeight": 176,
                                "_id": "619620e5e5d291b4f06068c0",
                                "updatedAt": "2022-01-25T10:22:00.895Z",
                                "createdAt": "2021-06-25T18:50:50.490Z",
                                "path": "assignment/619620e4e5d291b4f06067cb/files"
                            }
                        ],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "multipleChoiceQuestion",
                                    "choices": [
                                        {
                                            "id": "ytevdahslahgxymb",
                                            "text": "the top element",
                                            "correct": false,
                                            "label": "A"
                                        },
                                        {
                                            "id": "bqjthtfsfbuhuwxc",
                                            "text": "the center element",
                                            "correct": false,
                                            "label": "B"
                                        },
                                        {
                                            "id": "ojbjbwjbttcbfrde",
                                            "text": "the bottom element",
                                            "correct": true,
                                            "label": "C"
                                        },
                                        {
                                            "id": "okeifigxybeczivr",
                                            "text": "the element on the upper left",
                                            "correct": false,
                                            "label": "D"
                                        },
                                        {
                                            "id": "gqyqxmuemyseydzj",
                                            "text": "the element on the lower left",
                                            "correct": false,
                                            "label": "E"
                                        },
                                        {
                                            "id": "bxtuwkrzrafpogbq",
                                            "text": "the element on the upper right",
                                            "correct": false,
                                            "label": "F"
                                        },
                                        {
                                            "id": "xkowwjuholxrhhrp",
                                            "text": "the element on the lower right",
                                            "correct": true,
                                            "label": "G"
                                        }
                                    ],
                                    "actions": [
                                        {
                                            "id": "ehwvcaluyjjgbvdv",
                                            "type": "feedback",
                                            "condition": "(C || G) && !A && !B && !D && !E && !F",
                                            "text": "That's correct!"
                                        },
                                        {
                                            "id": "xzzodwhanhotmpty",
                                            "type": "feedback",
                                            "condition": "!((C || G) && !A && !B && !D && !E && !F)",
                                            "text": "That's not correct! Try again."
                                        }
                                    ],
                                    "_id": "5e386066a14e59b14c48f26f",
                                    "multipleCorrect": true,
                                    "text": "In a house with 10 floors the lift shows the current floor with a 7-segment digital number display. The numbers 0 (for ground floor) to 9 look like this:\n\n```image\nlabel: Floors\nsize: medium\n```\n\nThus, to display a number, at least 2 and at most 7 of the segments are switched on.\n\nRecently one of the segments was broken and did not switch on at all. Nevertheless it was possible to recognize all numbers and tell them apart. Which segment could have been the broken one?",
                                    "solution": "There are two possible answers: the bottom element or the one on the lower right."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "erea3y2490briz79vt7e"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067c7",
                        "visible": true,
                        "languages": [],
                        "searchString": "Maximal gain maximal gain maximalgain",
                        "moduleId": "619620e4e5d291b4f060670c",
                        "index": 1,
                        "title": "Maximal gain",
                        "createdAt": "2019-12-11T10:15:06.990Z",
                        "updatedAt": "2022-02-01T08:29:57.653Z",
                        "__v": 0,
                        "files": [
                            {
                                "label": "Grid",
                                "extension": ".jpg",
                                "mimetype": "image/jpeg",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 259,
                                "cropHeight": 219,
                                "_id": "619620e5e5d291b4f06068c6",
                                "updatedAt": "2022-01-25T10:22:00.923Z",
                                "createdAt": "2020-06-12T09:43:12.701Z",
                                "path": "assignment/619620e4e5d291b4f06067c7/files"
                            }
                        ],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "openQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "nvzmceypbtulabfl",
                                            "type": "feedback",
                                            "condition": "answer==14",
                                            "text": "That's correct!"
                                        },
                                        {
                                            "id": "nigpoavbzeeotage",
                                            "type": "feedback",
                                            "condition": "answer!=14",
                                            "text": "That's not correct. Try again."
                                        }
                                    ],
                                    "_id": "5df0c1ae4fd2a781d5f67120",
                                    "text": "The grid below contains numbers and two fields `S` (for start) and `G` (for goal). The task: Find the path from `S` to `G` on which the sum of the numbers on the visited fields is the highest. But: you are only allowed to step upwards and to the right (not down or to the left). What is the maximal sum that can be gained this way?\n\n```image\nlabel: Grid\n```",
                                    "solution": "The correct answer is *14*, for example through the following steps: up up right right right up right up.\n\nLater in the course we will look at how we can use a program to compute the best path through a grid like this.",
                                    "editor": "number"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "gcsvhsffaha2i33ww6qv"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067c6",
                        "visible": true,
                        "languages": [],
                        "searchString": "Filter filter",
                        "moduleId": "619620e4e5d291b4f060670c",
                        "index": 4,
                        "title": "Filter",
                        "createdAt": "2019-12-11T10:23:46.254Z",
                        "updatedAt": "2022-02-01T08:29:57.653Z",
                        "__v": 0,
                        "files": [
                            {
                                "label": "Filter_procedure",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 682,
                                "cropHeight": 502,
                                "_id": "619620e5e5d291b4f06068cc",
                                "updatedAt": "2022-01-25T10:22:00.937Z",
                                "createdAt": "2021-06-25T18:53:12.009Z",
                                "path": "assignment/619620e4e5d291b4f06067c6/files"
                            },
                            {
                                "label": "Filter_input",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 1186,
                                "cropHeight": 413,
                                "_id": "619620e5e5d291b4f06068cd",
                                "updatedAt": "2022-01-25T10:22:00.937Z",
                                "createdAt": "2021-06-25T18:54:44.757Z",
                                "path": "assignment/619620e4e5d291b4f06067c6/files"
                            }
                        ],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c3bd4fd2a75737f67128",
                                    "text": "A gray-scale bitmap can be saved as a table, with values of 1 to 5 for each pixel. The value 1 stands for *black*, the value 5 stands for *white*, and the values 2 to 4 stands for the lighter-getting shades of gray between them.\n\nA filtering algorithm computes a picture of same size for a given original according to the following procedure:\n\n```image\nlabel: Filter_procedure\n```\n\nFor each pixel in the original picture, it takes the value of the pixel and its eight neighboring pixels, sorts them from smallest to largest, and then takes the value in the middle, i.e. the 5th of 9 values, as the new value of the pixel in the filtered picture."
                                },
                                {
                                    "contentType": "multipleChoiceQuestion",
                                    "choices": [
                                        {
                                            "id": "gqgsslosvjcrhkot",
                                            "text": "```image\nlabel: Filter_answer_a\nposition: left\n```",
                                            "correct": true,
                                            "label": "A"
                                        },
                                        {
                                            "id": "hnhqznlendmefazu",
                                            "text": "```image\nlabel: Filter_answer_b\nposition: left\n```",
                                            "correct": false,
                                            "label": "B"
                                        },
                                        {
                                            "id": "xvxjpaelacvbhaqs",
                                            "text": "```image\nlabel: Filter_answer_c\nposition: left\n```",
                                            "correct": false,
                                            "label": "C"
                                        },
                                        {
                                            "id": "dbwfyfftkpijqejd",
                                            "text": "```image\nlabel: Filter_answer_d\nposition: left\n```",
                                            "correct": false,
                                            "label": "D"
                                        }
                                    ],
                                    "actions": [
                                        {
                                            "id": "zhctsloapdasjcps",
                                            "type": "feedback",
                                            "condition": "A",
                                            "text": "That's correct."
                                        },
                                        {
                                            "id": "eudnymkotnosbnko",
                                            "type": "feedback",
                                            "condition": "!A",
                                            "text": "That's not correct. Try again."
                                        }
                                    ],
                                    "_id": "5df0c3fd4fd2a70cd2f67129",
                                    "text": "Suppose we apply the filtering algorithm to the following picture:\n\n```image\nlabel: Filter_input\n```\n\nWhich of the following options is the result?",
                                    "solution": "The procedure turns each pixel into an median representation of its\nsurroundings, so the darker gray in next to white or lighter gray pixels become even lighter, while the white areas stay the same."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "2v1jfgpydt784o453shh"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067c5",
                        "visible": true,
                        "languages": [],
                        "searchString": "Download Times download times downloadtimes",
                        "moduleId": "619620e4e5d291b4f060670c",
                        "index": 0,
                        "title": "Download Times",
                        "createdAt": "2019-12-11T10:12:33.329Z",
                        "updatedAt": "2022-02-01T08:29:57.653Z",
                        "__v": 0,
                        "files": [
                            {
                                "label": "Downloads",
                                "extension": ".jpg",
                                "mimetype": "image/jpeg",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 348,
                                "cropHeight": 201,
                                "_id": "619620e5e5d291b4f06068d2",
                                "updatedAt": "2022-01-25T10:22:00.950Z",
                                "createdAt": "2020-06-12T09:43:12.700Z",
                                "path": "assignment/619620e4e5d291b4f06067c5/files"
                            }
                        ],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "openQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "feputvzddfwoswbj",
                                            "type": "feedback",
                                            "condition": "answer == 3",
                                            "text": "That's correct."
                                        },
                                        {
                                            "id": "rkoubufihlzrfaed",
                                            "type": "feedback",
                                            "condition": "answer != 3",
                                            "text": "That's not correct. Try again."
                                        }
                                    ],
                                    "_id": "5df0c1184fd2a7738af6711e",
                                    "text": "When downloading multiple files from the internet at the same time, the downloads share the capacity of the connection between them, each getting the same share. For example, when downloading 10 files at the same time, each of the downloads can use 1/10 of the capacity. Downloading a single file would be ten times as fast.\n\nNow consider the following situation: A user is downloading 4 files at the same time. For each file the remaining download time is displayed as follows:\n\n```image\nlabel: Downloads\nsize: small\n```\n\nThis time is calculated based on the capacity of the Internet connection (which stays the same all the time). How many minutes will it take until all 4 files have finished downloading?",
                                    "solution": "The correct answer is *3 minutes*.\n\nAfter 1 minute, downloads 1 and 3 are finished, and the downloads 2 and 4 have 6 and 2 minutes remaining, respectively. Instead of sharing the available capacity among 4, they only share it among 2 now, so the download is twice as fast, so they have 3 and 1 minutes remaining. Thus, after 1 more minute, download 4 is finished and download 2 has 2 minutes left. It can now use the full capacity and is again twice as fast as before, so it finishes after just another minute.",
                                    "editor": "number"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "ibattckr05xlnts4crhw"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067c8",
                        "visible": true,
                        "languages": [],
                        "searchString": "Extra extra",
                        "moduleId": "619620e4e5d291b4f060670c",
                        "index": 5,
                        "title": "Extra",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-03T17:50:41.416Z",
                        "updatedAt": "2022-02-01T08:29:57.652Z",
                        "__v": 0,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e385d75a14e59312f48f26e",
                                    "text": "Solving puzzles like the ones in this module is a great way to train all sorts of computational thinking skills “unplugged”, i.e. without actually using a computer. If you would like to do more puzzles, right now or later, [cs4fn Computational Thinking Puzzles Issue 1] (https://cs4fndownloads.wordpress.com/computational-thinking-puzzles-issue-1/) is a great resource for you.\n\nThe exercises for this module have been adapted from selected [Bebras](https://www.bebras.org/) questions. "
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "fx3h5g80g5mezylokror"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067ca",
                        "visible": true,
                        "languages": [],
                        "searchString": "Quarters quarters",
                        "moduleId": "619620e4e5d291b4f060670c",
                        "index": 3,
                        "title": "Quarters",
                        "createdAt": "2019-12-11T10:19:49.630Z",
                        "updatedAt": "2022-02-01T08:29:57.653Z",
                        "__v": 0,
                        "files": [
                            {
                                "label": "Bitmap",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 782,
                                "cropHeight": 352,
                                "_id": "619620e5e5d291b4f06068b9",
                                "updatedAt": "2022-01-25T10:22:01.083Z",
                                "createdAt": "2021-06-25T18:43:45.336Z",
                                "path": "assignment/619620e4e5d291b4f06067ca/files"
                            },
                            {
                                "label": "Bitmap_question",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 496,
                                "cropHeight": 411,
                                "_id": "619620e5e5d291b4f06068ba",
                                "updatedAt": "2022-01-25T10:22:01.083Z",
                                "createdAt": "2021-06-25T18:43:51.597Z",
                                "path": "assignment/619620e4e5d291b4f06067ca/files"
                            },
                            {
                                "label": "Bitmap_examples",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 125,
                                "cropY": 52,
                                "cropWidth": 1180,
                                "cropHeight": 347,
                                "_id": "619620e5e5d291b4f06068bb",
                                "updatedAt": "2022-01-25T10:22:01.083Z",
                                "createdAt": "2021-06-25T18:44:06.835Z",
                                "path": "assignment/619620e4e5d291b4f06067ca/files"
                            }
                        ],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c2d84fd2a74489f67124",
                                    "text": "Black-and-white bitmaps can be represented with the binary characters 0 and 1, as illustrated here:\n\n```image\nlabel: Bitmap\n```\n\nA 0 stands for a white pixel, and a 1 for a black pixel. A picture with 4 x 4 pixels can thus be encoded with 16 characters, and a picture with 8 x 8 pixels with 64 characters.\n\nMany pictures can however also be represented with less characters. Therefore the characters are arranged in a square raster, and the following procedure is applied:\n- If all characters in the raster are 0, the result is the character 0.\n- If all characters in the raster are 1, the result is the character 1.\n- Otherwise the raster is split into 4 rasters of same size, and the procedure is applied to all of these rasters, starting with the upper left and proceeding in clock-wise direction. The result is then created as follows: The four results are written after one another, between the parentheses ( and ).\n\nHere are three examples of how the procedure works on a 4 x 4 raster:\n\n```image\nlabel: Bitmap_examples\n```"
                                },
                                {
                                    "contentType": "openQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "vxpvygeyvbkvtwiz",
                                            "type": "feedback",
                                            "condition": "answer==\"(111(1(1011)11))\"",
                                            "text": "That's correct."
                                        },
                                        {
                                            "id": "elrepekaerolarig",
                                            "type": "feedback",
                                            "condition": "answer!=\"(111(1(1011)11))\"",
                                            "text": "That's not correct. Try again."
                                        }
                                    ],
                                    "_id": "5df0c34a4fd2a70d61f67125",
                                    "text": "What is the result for the 8 x 8 raster below?\n\n```image\nlabel: Bitmap_question\n```",
                                    "solution": "`(111(1(1011)11))`"
                                },
                                {
                                    "contentType": "openQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "rkdctmvtuxixffkd",
                                            "type": "feedback",
                                            "condition": "answer==0",
                                            "text": "That's correct."
                                        },
                                        {
                                            "id": "wsauytadexsnwyte",
                                            "type": "feedback",
                                            "condition": "answer!=0",
                                            "text": "That's not correct. Try again."
                                        }
                                    ],
                                    "_id": "5df0c36c4fd2a767a8f67126",
                                    "text": "How many characters would the procedure save when applied on the smiley bitmap above?",
                                    "solution": "None. With the splits as defined in the procedure, there is never a square\nwith pixels of the same color, so it does not save anything.",
                                    "editor": "number"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "hnfsqth8pi9hrat97m3o"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067b5",
                        "visible": true,
                        "searchString": "Describing Activity Diagrams describing activity diagrams describingactivitydiagrams",
                        "moduleId": "619620e4e5d291b4f0606761",
                        "index": 1,
                        "title": "Describing Activity Diagrams",
                        "files": [
                            {
                                "label": "understanding_activity_diagrams",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 1128,
                                "cropHeight": 631,
                                "_id": "619620e4e5d291b4f0606849",
                                "updatedAt": "2022-01-25T10:22:00.853Z",
                                "createdAt": "2021-02-03T19:49:05.986Z",
                                "path": "assignment/619620e4e5d291b4f06067b5/files"
                            }
                        ],
                        "createdAt": "2021-02-03T19:25:16.493Z",
                        "updatedAt": "2022-02-01T08:30:05.040Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "ybdv063tga4gm3baljt0"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067b7",
                        "visible": true,
                        "searchString": "Extra extra",
                        "moduleId": "619620e4e5d291b4f0606761",
                        "index": 3,
                        "title": "Extra",
                        "isOptional": true,
                        "files": [],
                        "createdAt": "2021-02-03T19:59:39.706Z",
                        "updatedAt": "2022-11-23T06:13:41.045Z",
                        "__v": 0,
                        "introduction": "",
                        "keywords": [],
                        "publicKey": "s9tcyw37jode0ngzzq32",
                        "hasIntroduction": true
                    },
                    {
                        "_id": "619620e4e5d291b4f06067b6",
                        "visible": true,
                        "searchString": "Creating Activity Diagrams creating activity diagrams creatingactivitydiagrams",
                        "moduleId": "619620e4e5d291b4f0606761",
                        "index": 2,
                        "title": "Creating Activity Diagrams",
                        "files": [
                            {
                                "label": "uml_morning_routine",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 760,
                                "cropHeight": 280,
                                "_id": "619620e4e5d291b4f060685b",
                                "updatedAt": "2022-01-25T10:22:00.881Z",
                                "createdAt": "2021-02-03T19:56:09.821Z",
                                "path": "assignment/619620e4e5d291b4f06067b6/files"
                            },
                            {
                                "label": "uml_crossing_street",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 570,
                                "cropHeight": 160,
                                "_id": "619620e5e5d291b4f060685c",
                                "updatedAt": "2022-01-25T10:22:00.881Z",
                                "createdAt": "2021-02-03T19:56:32.411Z",
                                "path": "assignment/619620e4e5d291b4f06067b6/files"
                            },
                            {
                                "label": "uml_number_guessing",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 960,
                                "cropHeight": 280,
                                "_id": "619620e5e5d291b4f060685d",
                                "updatedAt": "2022-01-25T10:22:00.881Z",
                                "createdAt": "2021-02-03T19:56:42.418Z",
                                "path": "assignment/619620e4e5d291b4f06067b6/files"
                            },
                            {
                                "label": "uml_primer_design",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 1070,
                                "cropHeight": 285,
                                "_id": "619620e5e5d291b4f060685e",
                                "updatedAt": "2022-01-25T10:22:00.881Z",
                                "createdAt": "2021-02-03T19:57:00.279Z",
                                "path": "assignment/619620e4e5d291b4f06067b6/files"
                            }
                        ],
                        "createdAt": "2021-02-03T19:50:18.658Z",
                        "updatedAt": "2022-11-23T06:13:41.112Z",
                        "__v": 0,
                        "introduction": "In this exercise you are asked to create some UML Activity Diagrams yourself. You can draw them using pen and paper, with an office or graphics software, or use a specialized editor like [UMLet](http://www.umlet.com) (installation required) or the browser-based [UMLetino](http://www.umletino.com/umletino.html). Note that you cannot submit images to Quarterfall, but after submitting a dummy text you can see the sample solutions and compare them with your diagrams.",
                        "keywords": [],
                        "publicKey": "b97573zkbsndxui5wl9m",
                        "hasIntroduction": true
                    },
                    {
                        "_id": "619620e4e5d291b4f06067b3",
                        "visible": true,
                        "searchString": "Understanding Activity Diagrams understanding activity diagrams understandingactivitydiagrams",
                        "moduleId": "619620e4e5d291b4f0606761",
                        "index": 0,
                        "title": "Understanding Activity Diagrams",
                        "files": [
                            {
                                "label": "uml_slime",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 1601,
                                "cropHeight": 753,
                                "_id": "619620e5e5d291b4f0606872",
                                "updatedAt": "2022-01-25T10:22:01.097Z",
                                "createdAt": "2021-02-03T19:27:51.128Z",
                                "path": "assignment/619620e4e5d291b4f06067b3/files"
                            },
                            {
                                "label": "uml_eggs",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 900,
                                "cropHeight": 250,
                                "_id": "619620e5e5d291b4f0606873",
                                "updatedAt": "2022-01-25T10:22:01.098Z",
                                "createdAt": "2021-02-03T19:40:52.522Z",
                                "path": "assignment/619620e4e5d291b4f06067b3/files"
                            },
                            {
                                "label": "uml_slime_A",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 737,
                                "cropHeight": 357,
                                "_id": "619620e5e5d291b4f0606874",
                                "updatedAt": "2022-01-25T10:22:01.098Z",
                                "createdAt": "2021-02-06T15:16:52.066Z",
                                "path": "assignment/619620e4e5d291b4f06067b3/files"
                            },
                            {
                                "label": "uml_slime_B",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 747,
                                "cropHeight": 347,
                                "_id": "619620e5e5d291b4f0606875",
                                "updatedAt": "2022-01-25T10:22:01.098Z",
                                "createdAt": "2021-02-06T15:16:58.843Z",
                                "path": "assignment/619620e4e5d291b4f06067b3/files"
                            },
                            {
                                "label": "uml_slime_C",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 824,
                                "cropHeight": 357,
                                "_id": "619620e5e5d291b4f0606876",
                                "updatedAt": "2022-01-25T10:22:01.098Z",
                                "createdAt": "2021-02-06T15:17:05.637Z",
                                "path": "assignment/619620e4e5d291b4f06067b3/files"
                            },
                            {
                                "label": "uml_slime_D",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 749,
                                "cropHeight": 355,
                                "_id": "619620e5e5d291b4f0606877",
                                "updatedAt": "2022-01-25T10:22:01.098Z",
                                "createdAt": "2021-02-06T15:17:13.900Z",
                                "path": "assignment/619620e4e5d291b4f06067b3/files"
                            }
                        ],
                        "createdAt": "2021-02-03T19:24:35.765Z",
                        "updatedAt": "2022-02-01T08:30:05.040Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "6yl2tndc6l51cqbafdsp"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f0606786",
                        "visible": true,
                        "languages": [],
                        "searchString": "List your lectures list your lectures listyourlectures",
                        "moduleId": "619620e4e5d291b4f0606717",
                        "index": 2,
                        "title": "List your lectures",
                        "createdAt": "2019-12-11T10:42:00.154Z",
                        "updatedAt": "2022-02-01T08:29:48.633Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c8014fd2a78125f67132",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that prints out for all of the weekdays the lectures that you have there. The output of the program should be something like:\n```\nMonday:    Evolutionary Computing\nTuesday:   (nothing)\nWednesday: Evolutionary Computing, Programming with Python\nThursday:  (nothing)\nFriday:    Programming with Python\n```\nMake sure that the list of lectures begins at the same position in every line.",
                                    "solution": "Here is a possible solution (note the use of tabs to ensure that the lecture list starts at the same position on each line):\n```python\nprint(\"Monday:\\t\\tEvolutionary Computing\")\nprint(\"Tuesday:\\t(nothing)\")\nprint(\"Wednesday:\\tEvolutionary Computing, Programming with Python\")\nprint(\"Thursday:\\t(nothing)\")\nprint(\"Friday:\\t\\tProgramming with Python\")\n```"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "ak0qvm7fhy9vr5c407yf"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606788",
                        "visible": true,
                        "languages": [],
                        "searchString": "Printing source code printing source code printingsourcecode",
                        "moduleId": "619620e4e5d291b4f0606717",
                        "index": 1,
                        "title": "Printing source code",
                        "createdAt": "2019-12-11T10:38:30.865Z",
                        "updatedAt": "2022-02-01T08:29:48.633Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c7374fd2a753e1f67130",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that prints the source code from the previous exercise to the screen.\nThe output should look as follows:\n```\na = 2.3\nb = 42\n\nprint(f\"{a} + {b} is {a+b}\")\n\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\n\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\n\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\n```\n**Important**: If you get any error messages when you try to execute your programs, don't panic. Read the message and try to understand where and what the problem is. You can also use Google to find out more, common errors are usually discussed in different development forums. If that does not get you any further, ask a teaching assistant in the lab or post your question to the course forum on Blackboard.",
                                    "solution": "One possible way to print the piece of source code is to use the triple quotation marks around it:\n```python\nprint(\"\"\"a = 2.3\nb = 42\nprint(f\"{a} + {b} is {a+b}\")\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\"\n\"\"\")\n```"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "t1rcvzuk7ror5uuh2b3b"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606787",
                        "visible": true,
                        "languages": [],
                        "searchString": "BMI calculation bmi calculation bmicalculation",
                        "moduleId": "619620e4e5d291b4f0606717",
                        "index": 5,
                        "title": "BMI calculation",
                        "createdAt": "2019-12-11T10:49:33.640Z",
                        "updatedAt": "2022-02-01T08:29:48.633Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c9c74fd2a769f7f67138",
                                    "programmingLanguage": "python",
                                    "text": "Write a Python program that welcomes the user, asks for his name (string), weight in kg (integer) and height in m (float), computes the body mass index (BMI) from the information ($weight/height^2$) and finally displays a message to the user, saying something like \"Hello Jim, your BMI is 23.4.\". You can assume that the user enters correct values.",
                                    "solution": "```python\n# welcome message\nprint(\"Welcome to the BMI calculator.\")\n\n# ask name\nuser_name = input(\"What is your name? \")\n\n# ask weight\nuser_weight = int(input(\"What is your weight (in kg)? \"))\n\n# ask height\nuser_height = float(input(\"What is your height (in m)? \"))\n\n# calculate BMI\nbmi = user_weight / user_height**2\n\n# display result\nprint(f\"Hello {user_name}, your BMI is {bmi:.1f}.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "ynoxs2jk9h4x981lek2s"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606789",
                        "visible": true,
                        "languages": [],
                        "searchString": "Arithmetic Operations arithmetic operations arithmeticoperations",
                        "moduleId": "619620e4e5d291b4f0606717",
                        "index": 3,
                        "title": "Arithmetic Operations",
                        "createdAt": "2019-12-11T10:44:40.374Z",
                        "updatedAt": "2022-02-01T08:29:48.633Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c8a34fd2a79d24f67134",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that asks the user to enter two integer numbers and then executes all the seven arithmetic operations with it for which Python has standard operators.\n\nThe output of the program should be something like:\n```\nPlease enter an integer number: 7\nPlease enter another integer number: 4\n7 ** 4 is 2401\n7 * 4 is 28\n7 / 4 is 1.75\n7 // 4 is 1\n7 % 4 is 3\n7 + 4 is 11\n7 - 4 is 3\n```\n\nYou can assume that the user enters two positive integer numbers (>0). Nevertheless, try what happens when you enter a negative number or 0.",
                                    "solution": "```python\n# ask for two integer numbers\na = int(input(\"Please enter an integer number: \"))\nb = int(input(\"Please enter another integer number: \"))\n\n# the arithmetic operations with a and b\nprint(f\"{a} ** {b} is {a**b}\")\nprint(f\"{a} * {b} is {a*b}\")\nprint(f\"{a} / {b} is {a/b}\")\nprint(f\"{a} // {b} is {a//b}\")\nprint(f\"{a} % {b} is {a%b}\")\nprint(f\"{a} + {b} is {a+b}\")\nprint(f\"{a} - {b} is {a-b}\")\n```"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "l27u4zqdbxfbbenwrlpl"
                    },
                    {
                        "_id": "619620e4e5d291b4f060678a",
                        "visible": true,
                        "languages": [],
                        "searchString": "Celsius to Fahrenheit converter celsius to fahrenheit converter celsiustofahrenheitconverter",
                        "moduleId": "619620e4e5d291b4f0606717",
                        "index": 4,
                        "title": "Celsius to Fahrenheit converter",
                        "createdAt": "2019-12-11T10:46:48.296Z",
                        "updatedAt": "2022-02-01T08:29:48.633Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c92c4fd2a7e7abf67136",
                                    "programmingLanguage": "python",
                                    "text": "Write a Python program that asks the user to enter a temperature (as float) in degrees Celsius and computes what the temperature is in degrees Fahrenheit. The formula to compute Fahrenheit from Celsius is:\n\n$$\n32 + \\frac{degreesCelsius * 9}{5}\n$$\n\nThe output of the program should be something like:\n```\nPlease enter the temperature in degrees Celsius: 12.5\n12.5 degrees Celsius is 54.5 degrees Fahrenheit.\n```",
                                    "solution": "```python\n# read floating point value for temperature Celsius from user\ntemp_c = float(input(\"Please enter the temperature in degrees Celsius: \"))\n\n# compute temperature in degrees Fahrenheit\ntemp_f = 32 + temp_c * (9/5)\n\n# print result\nprint(f\"{temp_c} degrees Celsius is {temp_f} degrees Fahrenheit.\")\n```"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "vht2no6orpp0f5dk9c7q"
                    },
                    {
                        "_id": "619620e4e5d291b4f060678c",
                        "visible": true,
                        "searchString": "Extra extra",
                        "moduleId": "619620e4e5d291b4f0606717",
                        "index": 6,
                        "title": "Extra",
                        "isOptional": true,
                        "files": [],
                        "createdAt": "2021-02-08T07:43:11.655Z",
                        "updatedAt": "2022-11-23T06:13:40.781Z",
                        "__v": 0,
                        "introduction": "",
                        "keywords": [],
                        "publicKey": "d5mgwo4vnfe58a40m2ou",
                        "hasIntroduction": true
                    },
                    {
                        "_id": "619620e4e5d291b4f060678b",
                        "visible": true,
                        "languages": [],
                        "searchString": "Understanding Python code understanding python code understandingpythoncode",
                        "moduleId": "619620e4e5d291b4f0606717",
                        "index": 0,
                        "title": "Understanding Python code",
                        "createdAt": "2019-12-11T10:27:46.456Z",
                        "updatedAt": "2022-02-01T08:29:48.633Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "openQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c4ad4fd2a746c6f6712b",
                                    "text": "Consider the following piece of code, which is very similar to, but not exactly the same as the interactive input example from the lecture:\n```python\nuser_name = input(\"What is your name? \")\nprint(f\"Hello {user_name}!\")\nuser_age = input(\"What is your age (in years)? \")\nprint(f\"Then you are at least {user_age*12} months old.\")\n```\n\nWhat is its output? What is the difference in the code, and can you explain why the output is different?\n\n**Important:** Do not immediately paste the code into the editor and run it to see what it does. First try to read the code and figure it out from that, then check by executing it. Same for any other piece of Python code that you come across. That will greatly improve your understanding of Python programs. And by the way, such questions are also very popular in exams! :wink:",
                                    "solution": "For output just execute. The difference to the example from the lecture is\nthat the `user_age` is not cast to integer. This causes the expression `{user_age*12}` to evaluate to a string like `363636363636363636363636` instead of computing the number of months."
                                },
                                {
                                    "contentType": "openQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5df0c54c4fd2a76c36f6712d",
                                    "text": "Here is another piece of code:\n```python\na = 2.3\nb = 42\n\nprint(f\"{a} + {b} is {a+b}\")\n\nprint(f\"{a} + {b} is {str(a+b)}\")\nprint(f\"{a} + {b} is {str(a)+str(b)}\")\n\nprint(f\"{a} + {b} is {int(a+b)}\")\nprint(f\"{a} + {b} is {int(a)+int(b)}\")\n\nprint(f\"{a} + {b} is {float(a+b)}\")\nprint(f\"{a} + {b} is {float(a)+float(b)}\")\n```\nWhat is the output? Explain what causes the differences between the lines.",
                                    "solution": "For output just execute.\n\nThe differences between the lines are caused the\ndifferent type casts that are applied and also the points where they are applied. In the version without type casts, Python is doing the casts automatically based on what it infers to be best, which in this case corresponds to the intuitive result.\n\nIn the second print line, the result of the computation is cast to string, which does not change the look of the output.\n\nIn the third print line, the numbers are cast to strings before the operation is applied, so the corresponding string operation is executed and the result looks different.\n\nIn the fourth print line, the result is cast to integer, so it loses its decimal places before being displayed. In the fifth print line, the two\nnumbers are cast to integer before the operation. The result is again an integer number and looks as in the line before.\n\nIn the sixth print line, the result is explicitly cast to float, and displayed as such.\n\nIn the last line, the operands are both cast to float before applying the operation, resulting in the same output as before."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "i9rhod20r1fsgwz3vahw"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067ac",
                        "visible": true,
                        "languages": [],
                        "searchString": "Morning Coffee morning coffee morningcoffee",
                        "moduleId": "619620e4e5d291b4f0606740",
                        "index": 3,
                        "title": "Morning Coffee",
                        "files": [],
                        "createdAt": "2020-02-02T18:49:14.498Z",
                        "updatedAt": "2022-02-01T08:30:17.065Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e3719ad54878c4382ccb00d",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that pretends to be your waiter, bringing your morning coffee with optional milk/sugar, like in the Activity Diagram that we discussed in the lecture in the first week. The program should ask the user regarding milk and sugar, and the output should be something like:\n\n```\nGood morning! I made coffee for you.\nDo you want to add milk? (y/n) y\nI added milk.\nDo you want to add sugar? (y/n) n\nOk, no sugar.\nEnjoy!\n```",
                                    "solution": "```python\n# greet the user and announce coffee\nprint(\"Good morning! I made coffee for you.\")\n\n# ask if milk should be added and act accordingly\nadd_milk = input(\"Do you want to add milk? (y/n) \")\nif add_milk == \"y\":\n    print(\"I added milk.\")\nelif add_milk == \"n\":\n    print(\"Ok, no milk.\")\nelse:\n    print(\"I did not understand, so I don't add milk.\")\n\n# ask if sugar should be added and act accordingly\nadd_sugar = input(\"Do you want to add sugar? (y/n) \")\nif add_sugar == \"y\":\n    print(\"I added sugar.\")\nelif add_sugar == \"n\":\n    print(\"Ok, no sugar.\")\nelse:\n    print(\"I did not understand, so I don't add sugar.\")\n\n# friendly closure\nprint(\"Enjoy!\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "x2e5gtkowct66vvxbhy8"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067ae",
                        "visible": true,
                        "languages": [],
                        "searchString": "BMI Calculation Revisited bmi calculation revisited bmicalculationrevisited",
                        "moduleId": "619620e4e5d291b4f0606740",
                        "index": 2,
                        "title": "BMI Calculation Revisited",
                        "files": [],
                        "createdAt": "2020-02-02T18:47:36.592Z",
                        "updatedAt": "2022-02-01T08:30:17.065Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e37194b54878cbb48ccb00b",
                                    "programmingLanguage": "python",
                                    "text": "Extend the BMI calculation program from the last homework so that after informing the user about the calculated BMI, it also prints out if the BMI is within the range that is generally considered normal (between 18.5 and 25) or higher (above 25) or lower (below 18.5) than that. The output of the modified program should then be something like:\n\n```\nWelcome to the BMI calculator.\nWhat is your name? John Doe\nWhat is your weight (in kg)? 78\nWhat is your height (in m)? 1.82\nHello John Doe, your BMI is 23.5.\nYour BMI is normal.\n```",
                                    "solution": "```python\n# welcome message\nprint(\"Welcome to the BMI calculator.\")\n\n# ask name\nuser_name = input(\"What is your name? \")\n\n# ask weight\nuser_weight = int(input(\"What is your weight (in kg)? \"))\n\n# ask height\nuser_height = float(input(\"What is your height (in m)? \"))\n\n# calculate BMI\nbmi = user_weight / user_height**2\n\n# display result\nprint(f\"Hello {user_name}, your BMI is {bmi:.1f}.\")\n\n# inform the user if this BMI is in normal range\nif bmi < 18.5:\n    print(\"Your BMI is low\")\nelif 18.5 <= bmi < 25:\n    print(\"Your BMI is normal.\")\nelse:\n    print(\"Your BMI is high.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "knx2zd1xpai27l7egf04"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067af",
                        "visible": true,
                        "languages": [],
                        "searchString": "Divisibility divisibility",
                        "moduleId": "619620e4e5d291b4f0606740",
                        "index": 1,
                        "title": "Divisibility",
                        "files": [],
                        "createdAt": "2020-02-02T18:46:16.273Z",
                        "updatedAt": "2022-02-01T08:30:17.065Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e3718fb54878c2f4eccb009",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that asks the user to enter two integer numbers, then checks if the first number is divisible by the second number and informs the user accordingly. The output should be something like:\n\n```\nPlease enter an integer number: 15\nPlease enter another integer number: 5\n15 is divisible by 5.\n\nPlease enter an integer number: 12\nPlease enter another integer number: 5\n12 is not divisible by 5.\n```",
                                    "solution": "```python\n# ask the user to enter two integer numbers\nnumber1 = int(input(\"Please enter an integer number: \"))\nnumber2 = int(input(\"Please enter another integer number: \"))\n\n# check if number1 is divisible by number2, display message accordingly\nif number1%number2 == 0:\n    print(f\"{number1} is divisible by {number2}.\")\nelse:\n    print(f\"{number1} is not divisible by {number2}.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "vz2igw574m44f2qnolse"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067b0",
                        "visible": true,
                        "languages": [],
                        "searchString": "Extra extra",
                        "moduleId": "619620e4e5d291b4f0606740",
                        "index": 6,
                        "title": "Extra",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-13T18:45:44.351Z",
                        "updatedAt": "2022-02-01T08:30:17.065Z",
                        "__v": 0,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e45995bd9276b98884c265e",
                                    "text": "In the lecture we talked about binary numbers. Maybe you now find “binary jokes” funny, like those collected in http://amagicclassroom.com/uploads/3/4/5/2/34528828/math_binary_jokes.pdf. If you like that, ask Google for more binary or boolean or programmer jokes, there are plenty..."
                                },
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e459989d9276b27004c265f",
                                    "text": "If you want to test your understanding of binary numbers, try the decimal-to-binary quiz at http://www.free-test-online.com/binary/decimal2binary.htm or the binary-to-decimal quiz at http://www.free-test-online.com/binary/binary2decimal.htm."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "xp76wskd69asz0lh5lhl"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067b2",
                        "visible": true,
                        "languages": [],
                        "searchString": "Grade Calculation grade calculation gradecalculation",
                        "moduleId": "619620e4e5d291b4f0606740",
                        "index": 5,
                        "title": "Grade Calculation",
                        "files": [],
                        "createdAt": "2020-02-02T18:52:14.649Z",
                        "updatedAt": "2022-02-01T08:30:17.065Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e371a6154878c080bccb011",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that calculates the grade for this course. It should first ask if a student took part in all three examination parts (midterm, project and final exam). If not, it should send the student to the lecturer to discuss the situation. Otherwise, it reads in the three grades. It checks if they are all >= 4. If not, the course is failed. If they are, it checks\nif the weighted average (midterm and final exam each account for 30% of the final grade, and the project for 40%) is >= 6. If not, send the student to the retake exam. If it is, print out the final grade to the screen. \n\nThe output should be something like:\n\n```\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) no\nPlease go to the lecturer to discuss your situation.\n\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) yes\nPlease enter your midterm grade: 6.5\nPlease enter your final exam grade: 7.5\nPlease enter your project grade: 8\nCongratulations, you passed the course with grade 7.4.\n\nHave you taken part in all examination parts (midterm, final exam,\nproject? (yes/no) yes\nPlease enter your midterm grade: 5\nPlease enter your final exam grade: 6\nPlease enter your project grade: 6\nYou have to take part in the retake exam.\n```",
                                    "solution": "```python\nprint(\"Hello student, welcome to grade calculation!\")\nexamination_complete = input(\"Have you taken part in all examination \\\n                             parts (midterm, final exam, project? (yes/no) \")\nif examination_complete == \"no\":\n    print(\"Please go to the lecturer to discuss your situation.\")\nelif examination_complete == \"yes\":\n    grade_midterm = float(input(\"Please enter your midterm grade: \"))\n    grade_exam = float(input(\"Please enter your final exam grade: \"))\n    grade_project = float(input(\"Please enter your project grade: \"))\n    if grade_midterm >= 4 and grade_exam >= 4 and grade_project >=4:\n        weighted_average = 0.3*grade_midterm + 0.3*grade_exam + 0.4*grade_project\n        if weighted_average >= 6:\n            print(f\"Congratulations, you passed the course with grade {weighted_average:.1f}.\")\n        else:\n            print(\"You have to take part in the retake exam.\")\n    else:\n        print(\"Sorry, you failed the course.\")\nelse:\n    print(\"Sorry, I did not understand.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "bym7jfudaqih1wewr9ya"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067ad",
                        "visible": true,
                        "languages": [],
                        "searchString": "Age Check age check agecheck",
                        "moduleId": "619620e4e5d291b4f0606740",
                        "index": 0,
                        "title": "Age Check",
                        "files": [],
                        "createdAt": "2020-02-02T18:42:33.927Z",
                        "updatedAt": "2022-02-01T08:30:17.065Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e37182854878c26deccb006",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that asks the user to enter their age. If it is under 18, the program should display a message to refuse entry, otherwise invite the user to come in. The output should be something like:\n```\nHow old are you (in years)? 15\nSorry, you are not allowed to enter.\n\nHow old are you (in years)? 29\nWelcome! Please come in.\n```",
                                    "solution": "```python\n# ask user to enter their age\nage = int(input(\"How old are you (in years)? \"))\n\n# check if age is below 18, reject or welcome guest accordingly\nif age < 18:\n    print(\"Sorry, you are not allowed to enter.\")\nelse:\n    print(\"Welcome! Please come in.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "4kx4xpzebw30o2vx7j2o"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067b1",
                        "visible": true,
                        "languages": [],
                        "searchString": "Diagnostics diagnostics",
                        "moduleId": "619620e4e5d291b4f0606740",
                        "index": 4,
                        "title": "Diagnostics",
                        "files": [],
                        "createdAt": "2020-02-02T18:50:22.482Z",
                        "updatedAt": "2022-02-01T08:30:17.065Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e3719f254878c0b7cccb00f",
                                    "programmingLanguage": "python",
                                    "text": "Influenza-like illness is characterized by the patients having fever, cough, and one or more of the following symptoms: sore throat, joint and muscle pain, complete exhaustion. Write a Python program that asks a patient about the symptoms (if the patient has them or not), and from that determines if influenza-like illness is likely or not. Use only one Boolean expression for that. The output should be something like:\n\n```\nDo you have fever? (y/n) y\nDo you have a cough? (y/n) y\nDo you have a sore throat? (y/n) n\nDo you have joint and muscle pain? (y/n) n\nDo you experience complete exhaustion? (y/n) y\nI think you have influenza-like illness. Please consult your GP.\n\nDo you have fever? (y/n) y\nDo you have a cough? (y/n) n\nDo you have a sore throat? (y/n) y\nDo you have joint and muscle pain? (y/n) y\nDo you experience complete exhaustion? (y/n) n\nI don't know what you have, but it does not seem to be influenza-\nlike illness. Please consult your GP.\n```",
                                    "solution": "```python\n# ask the user for their symptoms\nfever = input(\"Do you have fever? (y/n) \")\ncough = input(\"Do you have a cough? (y/n) \")\nsore_throat = input(\"Do you have a sore throat? (y/n) \")\njoint_and_muscle_pain = input(\"Do you have joint an muscle pain? (y/n) \")\ncomplete_exhaustion = input(\"Do you experience complete exhaustion? (y/n) \")\n\n# check if influenza-like illness can be diagnosed or not\nif fever==\"y\" and cough==\"y\" and (sore_throat==\"y\" or \\\n                                  joint_and_muscle_pain==\"y\" or \\\n                                  complete_exhaustion==\"y\"):\n    print(\"I think you have an influenca-like illness. Please consult your GP.\")\nelse:\n    print(\"I don't know what you have, but it does not seem to be influenca- \\\n          like illness. Please consult your GP.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "pdjdz0ncqj2zeu2ubq02"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067b9",
                        "visible": true,
                        "languages": [],
                        "searchString": "Temperature Conversion Revisited temperature conversion revisited temperatureconversionrevisited",
                        "moduleId": "619620e4e5d291b4f0606764",
                        "index": 3,
                        "title": "Temperature Conversion Revisited",
                        "files": [],
                        "createdAt": "2020-02-02T19:08:34.482Z",
                        "updatedAt": "2022-02-01T08:30:24.340Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e371e3554878c7d8eccb019",
                                    "programmingLanguage": "python",
                                    "text": "Extend the temperature conversion program from last week so that it asks the user to enter both a temperature value and the unit of the temperature (Celsius or Fahrenheit), and calculates the temperature in the respecive other unit. If an incorrect unit is entered, the program should give an error message and ask the user to try again. Furthermore, after having done a conversion, the program should ask the user if they want to convert another temperature value. \n\nThe output should be something like:\n\n```\nPlease enter temperature: 54\nIs the temperature in Celsius (c) or Fahrenheit (f)? c\n54.0 degrees Celsius is 129.2 degrees Fahrenheit.\nDo you want to convert another temperature value? (y/n) y\nPlease enter temperature: 13\nIs the temperature in Celsius (c) or Fahrenheit (f)? k\nUnknown temperature unit, try again.\nPlease enter temperature: 13\nIs the temperature in Celsius (c) or Fahrenheit (f)? c\n13.0 degrees Celsius is 55.4 degrees Fahrenheit.\nDo you want to convert another temperature value? (y/n) n\nOkay, goodbye!\n```",
                                    "solution": "```python\n# start infinite loop for running the program until the user ends it\nwhile True:\n\n    # read temperature value from user\n    temp = float(input(\"Please enter temperature: \"))\n    unit = input(\"Is the temperature in Celsius (c) or Fahrenheit (f)? \")\n\n    # read temperature unit from user and convert or display error\n    if unit == \"c\":\n        print(f\"{temp} degrees Celsius is {32 + temp * (9/5):.1f} degrees Fahrenheit.\")\n    elif unit == \"f\":\n        print(f\"{temp} degrees Fahrenheit is {(temp - 32) * (5/9):.1f} degrees Celsius.\")\n    else:\n        print(\"Unknown temperature unit, try again.\")\n        continue\n    \n    # ask user if they want to continue\n    more = input(\"Do you want to convert another temperature value? (y/n) \")\n    if more == \"n\":\n        print(\"Okay, goodbye!\")\n        break\n"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "tt86jeuomvm0vqoxinwh"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067be",
                        "visible": true,
                        "languages": [],
                        "searchString": "Text Analysis text analysis textanalysis",
                        "moduleId": "619620e4e5d291b4f0606764",
                        "index": 4,
                        "title": "Text Analysis",
                        "files": [],
                        "createdAt": "2020-02-02T19:10:34.380Z",
                        "updatedAt": "2022-02-01T08:30:24.340Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e371ead54878c0448ccb01b",
                                    "programmingLanguage": "python",
                                    "text": "Using what you have learned in the course so far, write a simple text analysis program that finds the (first) longest word in a text. It should work on any text, but you can use the “lorem ipsum” as an example:\n\n```python\n# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\nminim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\nea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\nvelit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\ncupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\nest laborum.\"\n```\n\nTo check if a character c is an alphabetic character, you can call the isalpha() function on it: c.isalpha(). It will return True or False.\n\nThe output of your should report the longest word and its length, like this:\n\n```\nThe longest word in the text is \"reprehenderit\" (13 characters).\n```",
                                    "solution": "```python\n# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\n#eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\n#minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\n#ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\n#velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\n#cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\n#est laborum.\"\n\n# initialize running length counter and word\nlength = 0\nword = \"\"\n\n# initialize variables for storing the max. length and longest word\nmax_length = 0\nlongest_word = \"\"\n\n# for all characters in the text ...\nfor character in text:\n    \n    # check if the character is a letter (part of a word).\n    if character.isalpha():\n        # if yes, increment the length counter and \n        # add the character to the word to remember\n        length += 1\n        word += character\n    else:\n        # reset running variables\n        length = 0\n        word = \"\"\n\n    # check if the current word is longer then the previous longest word\n    if length > max_length:\n        # if yes, remember the new max. length and longest word\n        max_length = length\n        longest_word = word\n        \n# print result\nprint(f\"The longest word in the text is \\\"{longest_word}\\\" \" \\\n      f\"({max_length} characters).\")\n",
                                    "template": "# some random text\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \\\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad \\\nminim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex \\\nea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \\\nvelit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \\\ncupidatat non proident, sunt in culpa qui officia deserunt mollit anim id \\\nest laborum.\"\n\n# write the code to find the longest word here"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "olrpm4zik7a9ncjcxsmk"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067bb",
                        "visible": true,
                        "languages": [],
                        "searchString": "Summing Up summing up summingup",
                        "moduleId": "619620e4e5d291b4f0606764",
                        "index": 1,
                        "title": "Summing Up",
                        "files": [],
                        "createdAt": "2020-02-02T19:05:56.719Z",
                        "updatedAt": "2022-02-01T08:30:24.340Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e371d9f54878c6651ccb015",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that asks the user to enter an integer number n, computes the sum of all numbers from 1 to n, and prints the result. The output should look like:\n\n```\nPlease enter an integer number: 5\nThe sum of all numbers from 1 to 5 is 15\n```",
                                    "solution": "```python\n# ask the user to enter a number\nn = int(input(\"Please enter an integer number: \"))\n\n# remember the initial input for later printout\norig_n = n\n\n# initialize sum to 0\nsum = 0\n\n# iterate over all values from n down to 1 and add them to sum\nwhile n > 0:\n    sum = sum + n\n    n = n - 1\n\n# print result\nprint(f\"The sum of all numbers from 1 to {orig_n} is {sum}.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "j97fojmh5dxb55bxq9q1"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067bd",
                        "visible": true,
                        "languages": [],
                        "searchString": "The Bag of Marshmallows the bag of marshmallows thebagofmarshmallows",
                        "moduleId": "619620e4e5d291b4f0606764",
                        "index": 2,
                        "title": "The Bag of Marshmallows",
                        "files": [],
                        "createdAt": "2020-02-02T19:07:00.764Z",
                        "updatedAt": "2022-02-01T08:30:24.340Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e371dd854878c2b64ccb017",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that implements the “Eating a bag of marshmallows” example from the lecture on Activity Diagrams. It should tell the user to open the bag, eat a marshmallow, ask if there are more left, and repeat eating and asking until the bag is empty. Then the bag should be put into trash. The output should be something like:\n\n```\nOpen bag of marshmallows.\nEat marshmallow.\nMore marshmallows left? (y/n) y\nEat marshmallow.\n\n[...]\n\nMore marshmallows left? (y/n) n\nDispose of bag.\n```",
                                    "solution": "```python\n# open bag\nprint(\"Open bag of marshmallows.\")\n\n# eat all the marshmallows\nwhile True:\n    print(\"Eat marshmallow.\")\n    more_left = input(\"More marshmallows left? (y/n) \")\n    if more_left==\"n\":\n        break\n\n# clean up\nprint(\"Dispose of bag.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "v6a3dvmd6aomnjbvpfy1"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067ba",
                        "visible": true,
                        "languages": [],
                        "searchString": "Canteen Dish canteen dish canteendish",
                        "moduleId": "619620e4e5d291b4f0606764",
                        "index": 0,
                        "title": "Canteen Dish",
                        "files": [],
                        "createdAt": "2020-02-02T19:03:16.765Z",
                        "updatedAt": "2022-02-01T08:30:24.340Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e371cf754878cbd01ccb013",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that corresponds to the \"Season your dish from the canteen\"\nActivity Diagram example from the first week's lecture (pre-test loop). It should announce you the dish, ask you if it needs more salt (y/n), if yes add salt and ask again, and if not let you enjoy it. The output should be something like:\n\n```\nHello, here is the dish of the day for you.\nDoes it need more salt? (y/n) y\nOkay, I added some more salt.\nDoes it need more salt? (y/n) y\nOkay, I added some more salt.\nDoes it need more salt? (y/n) n\nEnjoy your meal!\n```",
                                    "solution": "```python\n# greet the customer\nprint(\"Hello, here is the dish of the day for you.\")\n\n# ask the user if salt needs to be added, repeat until enough\nwhile input(\"Does it need more salt? (y/n) \") == \"y\":\n    print(\"Okay, I added some more salt.\")\n\n# friendly closing   \nprint(\"Enjoy your meal!\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "19gh59sskww5hy475yhi"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f060677e",
                        "visible": true,
                        "languages": [],
                        "searchString": "Password Generator password generator passwordgenerator",
                        "moduleId": "619620e4e5d291b4f0606714",
                        "index": 2,
                        "title": "Password Generator",
                        "createdAt": "2019-12-11T11:01:50.537Z",
                        "updatedAt": "2022-02-01T08:30:31.943Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "qalhsqlqbuvqafqg",
                                            "type": "unitTest",
                                            "tests": [
                                                {
                                                    "id": "tPMpS2guDDZ8RasxCH9i",
                                                    "name": "passwordShort",
                                                    "description": "Passwords with less than 8 characters should result in `None`",
                                                    "isCode": false,
                                                    "code": "create_password(4) == None"
                                                },
                                                {
                                                    "id": "4LEC2Z5JT3KYR8Up2cEt",
                                                    "name": "password8",
                                                    "description": "Should correctly create passwords with length 8",
                                                    "isCode": false,
                                                    "code": "len(create_password(8)) == 8"
                                                },
                                                {
                                                    "id": "DXw0Jn5TjByaP8IbyUQC",
                                                    "name": "password12",
                                                    "description": "Should correctly create passwords with length 12",
                                                    "isCode": false,
                                                    "code": "len(create_password(12)) == 12"
                                                },
                                                {
                                                    "id": "Tw79DzjjufccxKVEOnCv",
                                                    "name": "password16",
                                                    "description": "Should correctly create passwords with length 16",
                                                    "isCode": false,
                                                    "code": "len(create_password(16)) == 16"
                                                },
                                                {
                                                    "id": "JSSb2oc6Yo,mbxqCz,,C",
                                                    "name": "pattern",
                                                    "description": "Created passwords should have the requested pattern (sequence of alternating upper-case consonants and lower-case vowels, followed by 4 digits).",
                                                    "isCode": true,
                                                    "code": "import re\npattern = \"([BCDFGHJKLMNPQRSTVWXYZ][aeiou]){2,}\\d{4}\"\nmatcher = re.fullmatch(pattern, create_password(16))\nif matcher:\n    return True\nelse:\n    return False"
                                                }
                                            ],
                                            "imports": "import random"
                                        }
                                    ],
                                    "_id": "5df0cca04fd2a742cff6713c",
                                    "programmingLanguage": "python",
                                    "text": "People often use passwords that are too short or too simple and can easily be guessed. (\"123456\", \"Password\" and \"12345678\" were the most frequently used passwords in 2017!) Moreover, people tend to use the same password for different services, which makes it easy for criminals to take over other accounts once they have obtained one of the passwords. Thus, it is wise to use passwords that are reasonably long (8 characters minimum), consist of seemingly random sequences of letters (use of special characters is by the way not so important), and have a separate password for each account.\n\nWrite a program that helps you to create reasonably good passwords. Therefore define and implement a function `create_password(length)` that takes the desired length of the password as parameter. If a password shorter than 8 characters is requested, the function should refuse to create it (as it would not be secure) and simply return `None`. If the requested length is longer, then the function should fill the password with alternating upper-case consonants and lower-case vowels, apart for the last 4 positions, which should be filled with random numbers.",
                                    "template": "# import the random package (needed to randomize the password)\nimport random\n\n# function for creating a password of a given length\ndef create_password(length):\n    # fill this in",
                                    "solution": "```python\n# import the random package (needed to randomize the password)\nimport random\n\n# function for creating a password of a given length\ndef create_password(length):\n    # strings that just contain the letters that we want to use\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    vowels = \"aeiou\"\n    \n    # if the given length is too short, refuse to create (insecure) password\n    if length < 8:\n       print(\"Too short, please create longer password.\")\n       return None\n    # otherwise, create password as described\n    else:\n        # init empty password string\n        password = \"\"\n        # for the first length-4 characters ...\n        for i in range(1,length-3):\n            # put random consonants on the odd positions ...\n            if i%2 != 0:\n                password += random.choice(consonants)\n            # ... and random vowels on the even positions\n            else:\n                password += random.choice(vowels)\n        # fill the remaining four positions with random numbers\n        for i in range(length-3,length+1):\n            password += str(random.randint(0,9))\n    \n    # return created password        \n    return password\n```"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "5rd67o5knee34ym82sho"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606781",
                        "visible": true,
                        "languages": [],
                        "searchString": "Calculator calculator",
                        "moduleId": "619620e4e5d291b4f0606714",
                        "index": 1,
                        "title": "Calculator",
                        "files": [],
                        "createdAt": "2020-02-02T19:26:20.387Z",
                        "updatedAt": "2022-02-01T08:30:31.943Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "vsapoasuyjqqpctp",
                                            "type": "unitTest",
                                            "tests": [
                                                {
                                                    "id": "N5eJY7cNIESFWWZjh2ub",
                                                    "name": "test_add",
                                                    "description": "The result of add(x,y) should be equal to x+y.",
                                                    "isCode": false,
                                                    "code": "add(5,2) == 5+2"
                                                },
                                                {
                                                    "id": "HbcjPA3juQ2dAFbowVH,",
                                                    "name": "test_subtract",
                                                    "description": "The result of subtract(x,y) should be equal to x-y.",
                                                    "isCode": false,
                                                    "code": "subtract(5,2) == 5-2"
                                                },
                                                {
                                                    "id": "48kRcOrDD2tJW2feBHaj",
                                                    "name": "test_multiply",
                                                    "description": "The result of multiply(x,y) should be equal to x*y.",
                                                    "isCode": false,
                                                    "code": "multiply(5,2) == 5*2"
                                                },
                                                {
                                                    "id": "DVwr,JrQmJ0tZRJP42pd",
                                                    "name": "test_divide",
                                                    "description": "The result of divide(x,y) should be equal to x/y.",
                                                    "isCode": false,
                                                    "code": "divide(5,2) == 5/2"
                                                }
                                            ]
                                        }
                                    ],
                                    "_id": "5e37226654878c93b2ccb01f",
                                    "programmingLanguage": "python",
                                    "text": "Write a program that acts a simple calculator, asking the user if they want to add, subtract, multiply or divide two arbitrary numbers. Define functions `add(x,y)`, `subtract(x,y)`, `multiply(x,y)` and `divide(x,y)` for this. (Normally one would not define functions for these basic operators, but this is just an exercise...) After the user has selected an operation, they are asked to enter the numbers `x` and `y`. The program calculates and prints the result. \n\nThe output should be something like:\n\n```\nYou have four options:\n1. Add\n2. Subtract\n3. Multiply\n4. Divide\nEnter choice (1/2/3/4): 2\nEnter first number: 34\nEnter second number: 53\n34 - 53 = -19\n```",
                                    "solution": "```python\n# This function adds two numbers \ndef add(x, y):\n   return x + y\n\n# This function subtracts two numbers \ndef subtract(x, y):\n   return x - y\n\n# This function multiplies two numbers\ndef multiply(x, y):\n   return x * y\n\n# This function divides two numbers\ndef divide(x, y):\n   return x / y\n\n# Display options\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user \nchoice = input(\"Enter choice(1/2/3/4):\")\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Execute chosen operation with entered numbers\nif choice == '1':\n   print(f\"{num1} + {num2} = {add(num1,num2)}\")\n\nelif choice == '2':\n   print(f\"{num1} - {num2} = {subtract(num1,num2)}\")\n\nelif choice == '3':\n   print(f\"{num1} * {num2} = {multiply(num1,num2)}\")\n\nelif choice == '4':\n   print(f\"{num1} / {num2} = {divide(num1,num2)}\")\n\nelse:\n   print(\"Invalid input\")",
                                    "template": "# This function adds two numbers \ndef add(x, y):\n    # (fill this in)\n    \n# This function subtracts two numbers \ndef subtract(x, y):\n    # (fill this in)\n\n# This function multiplies two numbers\ndef multiply(x, y):\n    # (fill this in)\n    \n# This function divides two numbers\ndef divide(x, y):\n    # (fill this in)\n    \n# Display options\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\n# Take input from the user \n# (fill this in)\n\n# Execute chosen operation with entered numbers\n# (fill this in)\n"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "863c0lwva9wwie5iv814"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606784",
                        "visible": true,
                        "languages": [],
                        "searchString": "Basic Statistics basic statistics basicstatistics",
                        "moduleId": "619620e4e5d291b4f0606714",
                        "index": 3,
                        "title": "Basic Statistics",
                        "files": [],
                        "createdAt": "2020-02-02T19:56:30.798Z",
                        "updatedAt": "2022-03-16T09:15:42.125Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e372972e1d6d8f98bac0724",
                                    "programmingLanguage": "python",
                                    "text": "Use the `statistics` package from the Python standard library to define and\nimplement a function `print_basic_statistics()` with the following characteristics:\n* the function takes arbitrarily many numbers as input\n* the default case is that the function prints the arithmetic mean, median,\nstandard variation and variance of the input data to the screen\n* via a named parameter the calling code should also have the option to select only one of the four to be printed\n\nYou can use the following code to test your function:\n\n```python\nprint_basic_statistics(91,82,19,13,44,)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, \\ \noutput=\"median\")\n```\n\nThe output should be something like:\n```\nThe mean of (91, 82, 19, 13, 44) is 49.8.\nThe median of (91, 82, 19, 13, 44) is 44.0.\nThe standard deviation of (91, 82, 19, 13, 44) is 35.6.\nThe variance of (91, 82, 19, 13, 44) is 1267.7.\n\nThe median of (91, 82, 19, 13, 44, 73, 18, 95, 17, 65) is 54.5.\n```",
                                    "solution": "```python\n# import the statistics package\nimport statistics\n\n# Function that prints basic statistics for a sequence of numbers. Optionally,\n# the desired output can be specified (mean, median, sd, var). Default is to\n# to print all of them.\ndef print_basic_statistics(*numbers, output=\"all\"):\n    if output == \"all\":\n        print(f\"The mean of {numbers} is {statistics.mean(numbers):.1f}.\")\n        print(f\"The median of {numbers} is {statistics.median(numbers):.1f}.\")\n        print(f\"The standard deviation of {numbers} is {statistics.stdev(numbers):.1f}.\")\n        print(f\"The variance of {numbers} is {statistics.variance(numbers):.1f}.\")\n    elif output == \"mean\":\n        print(f\"The mean of {numbers} is {statistics.mean(numbers):.1f}.\")\n    elif output == \"median\":\n        print(f\"The median of {numbers} is {statistics.median(numbers):.1f}.\")\n    elif output == \"sd\":\n        print(f\"The standard deviation of {numbers} is {statistics.stdev(numbers):.1f}.\")\n    elif output == \"var\":\n        print(f\"The variance of {numbers} is {statistics.variance(numbers):.1f}.\")\n    else:\n        print(\"Unknown parameter.\")\n\n\n# test program\nprint_basic_statistics(91,82,19,13,44)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, output=\"median\")",
                                    "template": "# import the statistics package\nimport statistics\n\n# Function that prints basic statistics for a sequence of numbers. Optionally,\n# the desired output can be specified (mean, median, sd, var). Default is to\n# to print all of them.\n# (fill this in)\n\n# test program\nprint_basic_statistics(91,82,19,13,44)\nprint_basic_statistics(91,82,19,13,44,73,18,95,17,65, output=\"median\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "9wiuc33ywxqnd6rhh2ub",
                        "isOptional": true
                    },
                    {
                        "_id": "619620e4e5d291b4f0606780",
                        "visible": true,
                        "languages": [],
                        "searchString": "Leap Years leap years leapyears",
                        "moduleId": "619620e4e5d291b4f0606714",
                        "index": 0,
                        "title": "Leap Years",
                        "createdAt": "2019-12-11T10:52:50.228Z",
                        "updatedAt": "2022-02-01T08:30:31.943Z",
                        "__v": 0,
                        "files": [],
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "yskgybclcoqigaut",
                                            "type": "unitTest",
                                            "tests": [
                                                {
                                                    "id": "DR8yVm3L2cghVNbCTW2a",
                                                    "name": "test1900",
                                                    "description": "1900 should not be a leap year",
                                                    "isCode": false,
                                                    "code": "not is_leap_year(1900)"
                                                },
                                                {
                                                    "id": "M1JYetBwCK1li6VMs4oO",
                                                    "name": "test1984",
                                                    "description": "1984 should be a leap year",
                                                    "isCode": false,
                                                    "code": "is_leap_year(1984)"
                                                },
                                                {
                                                    "id": "mpOUAi3KhRGAqXE1C98j",
                                                    "name": "test1985",
                                                    "description": "1985 should not be a leap year",
                                                    "isCode": false,
                                                    "code": "not is_leap_year(1985)"
                                                },
                                                {
                                                    "id": "B5ipO21b4cYBeHjYNdIf",
                                                    "name": "test2000",
                                                    "description": "2000 should be a leap year",
                                                    "isCode": false,
                                                    "code": "is_leap_year(2000)"
                                                },
                                                {
                                                    "id": "OEk8Fxo7pzXF710xUaiU",
                                                    "name": "test2018",
                                                    "description": "2018 should not be a leap year",
                                                    "isCode": false,
                                                    "code": "not is_leap_year(2018)"
                                                }
                                            ],
                                            "imports": "import random",
                                            "answerEmbedding": "{{answer}}"
                                        }
                                    ],
                                    "_id": "5df0ca844fd2a73c16f6713a",
                                    "programmingLanguage": "python",
                                    "text": "In our lifetimes (unless we happen to get veeery old) a leap year occurs every four years. But actually, the rule is a bit more involved: A year is a leap year if it is a multiple of 4, but not a multiple of 100, unless it is also a multiple of 400. For example, 1984 and 2000 were leap years, but 1900 and 1985 were not.\n\nWrite a function `is_leap_year(year)` that tests if the year is a leap year. If so, the function should return `True`, and `False` otherwise. Implement the function using _only one_ Boolean expression.",
                                    "template": "def is_leap_year(year):\n    # fill this in",
                                    "solution": "```python\n# function that checks if the given year is a leap year\ndef is_leap_year(year):\n    return year%4==0 and not year%100==0 or \\\n           year%4==0 and year%100==0 and year%400==0"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "u6i6go653cytv5mii70z"
                    },
                    {
                        "_id": "619620e4e5d291b4f060677f",
                        "visible": true,
                        "languages": [],
                        "searchString": "Extra extra",
                        "moduleId": "619620e4e5d291b4f0606714",
                        "index": 5,
                        "title": "Extra",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-20T13:28:54.587Z",
                        "updatedAt": "2022-02-01T08:30:31.943Z",
                        "__v": 0,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4e899c5081c8a3b13c45bf",
                                    "text": "[CheckiO](https://checkio.org/) is a game where you need to code in Python (or JavaScript) to get further. By now you should know enough Python to try it out and solve the challenges there."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "ucmqaqzp2spgz1lni5pm"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606782",
                        "visible": true,
                        "languages": [],
                        "searchString": "Ackermann Function ackermann function ackermannfunction",
                        "moduleId": "619620e4e5d291b4f0606714",
                        "index": 4,
                        "title": "Ackermann Function",
                        "files": [
                            {
                                "label": "Ackermann",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 795,
                                "cropHeight": 144,
                                "_id": "619620e5e5d291b4f06068c3",
                                "updatedAt": "2022-01-25T10:22:00.908Z",
                                "createdAt": "2021-06-25T19:18:35.999Z",
                                "path": "assignment/619620e4e5d291b4f0606782/files"
                            }
                        ],
                        "createdAt": "2020-02-02T20:00:45.134Z",
                        "updatedAt": "2022-02-01T08:30:31.947Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e372aa854878c2af6ccb023",
                                    "text": "The Ackermann function (named after the German mathematician Wilhelm Friedrich Ackermann) grows rapidly already for small inputs. It exists in different variants, one of the common definitions is the following (for two nonnegative integers m and n):\n\n```image\nlabel: Ackermann\nsize: medium\n```\n\n"
                                },
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "imfblzzkfqgeyfwj",
                                            "type": "unitTest",
                                            "tests": [
                                                {
                                                    "id": "moGx14wpxXaPwoXtmvhM",
                                                    "name": "ackermann_0_0",
                                                    "description": "The result of ackermann(0,0) should be 1.",
                                                    "isCode": false,
                                                    "code": "ackermann(0,0) == 1"
                                                },
                                                {
                                                    "id": "FNRZE2jdumaPh0I55eAq",
                                                    "name": "ackermann_1_1",
                                                    "description": "The result of ackermann(1,1) should be 3.",
                                                    "isCode": false,
                                                    "code": "ackermann(1,1) == 3"
                                                },
                                                {
                                                    "id": "zSBUw6LQQdC0,vcJ5m,J",
                                                    "name": "ackermann_2_2",
                                                    "description": "The result of ackermann(2,2) should be 7.",
                                                    "isCode": false,
                                                    "code": "ackermann(2,2) == 7"
                                                },
                                                {
                                                    "id": "7O9SFB9xE7zbhgrKWMWU",
                                                    "name": "ackermann_1_0",
                                                    "description": "The result of ackermann(1,0) should be 2.",
                                                    "isCode": false,
                                                    "code": "ackermann(1,0) == 2"
                                                },
                                                {
                                                    "id": "vLrYrw9lQS3IIk6lmgIa",
                                                    "name": "ackermann_1_2",
                                                    "description": "The result of ackermann(1,2) should be 4.",
                                                    "isCode": false,
                                                    "code": "ackermann(1,2) == 4"
                                                }
                                            ]
                                        }
                                    ],
                                    "_id": "5e372a7054878c125dccb022",
                                    "programmingLanguage": "python",
                                    "text": "Define and implement a (recursive) function `ackermann(m,n)` that computes the Ackermann function value for two nonnegative integers m and n. \n\nYou can use the following code to test your function:\n```python\nprint(f\"ackermann(0,0) = {ackermann(0,0)}\")\nprint(f\"ackermann(1,1) = {ackermann(1,1)}\")\nprint(f\"ackermann(2,2) = {ackermann(2,2)}\")\n\n```\n\nThe output should be something like:\n\n```\nackermann(0,0) = 1\nackermann(1,1) = 3\nackermann(2,2) = 7\n```",
                                    "solution": "```python\n# function implementing the Ackermann function \n# (following straightforward from the recursive definition)\ndef ackermann(m,n):\n    if m==0:\n        return n+1\n    elif m>0 and n==0:\n        return ackermann(m-1,1)\n    else:\n        return ackermann(m-1,ackermann(m,n-1))\n",
                                    "template": "# Python function implementing the Ackermann function \ndef ackermann(m,n):\n    # (fill this in)"
                                },
                                {
                                    "contentType": "openQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e372be554878c1389ccb028",
                                    "text": "Now run the following test program on your ackermann function:\n```python\n# test program\ni = 0\nwhile True:\n    print(f\"ackermann({i},{i}) = {ackermann(i,i)}\")\n    i += 1\n```\n\nWhat is the last value that your program computes before you get a\n`RecursionError?` (Hint: It might be that the outputs in the IPython console in Spyder are too verbose to see anything. You can alternatively run your program from the command line to see more.) \n\nWhat does this error mean?",
                                    "solution": "The last output that I can get is `ackermann(3,3) = 61`. While trying to compute ackermann(4,4) the maximum recursion depth is reached and the program aborts with an `RecursionError`. \n\nThe Python environment allows only for a limited number of recursive calls of a function (to avoid them using up the available working memory), and with the fast-growing and double-recursive Ackermann function this limit is reached very quickly. For other recursive functions, it takes much longer before this happens, and often a `RecursionError` means that something is wrong with the implementation, so that recursive calls continue to happen although they should not (similar to an infinite loop)."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "ymdvp1xyowgvxv5ktmiu"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f0606793",
                        "visible": true,
                        "languages": [],
                        "searchString": "Irish League irish league irishleague",
                        "moduleId": "619620e4e5d291b4f0606723",
                        "index": 1,
                        "title": "Irish League",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-03T19:16:54.162Z",
                        "updatedAt": "2022-02-01T08:30:41.004Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e3871a9a14e59674c48f27d",
                                    "programmingLanguage": "python",
                                    "text": "Consider again the \"Irish League\" example from the lecture:\n\n```python\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"]\nfor home in teams:\n\tfor guest in teams:\n\t\tif home != guest:\n\t\t\tprint(f\"{home} : {guest}\")\n```\n\nAdd another list at the beginning:\n\n```python\ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n\"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n```\n\nThen adapt the code so that it does not only print the pairings, but also the date on which the match shall take place (using the dates in the list in the order they appear there). The output should then be:\n\n```\nConnacht : Ulster (June 1)\nConnacht : Munster (June 3)\nConnacht : Leinster (June 2)\nUlster : Connacht (June 4)\nUlster : Munster (June 6)\nUlster : Leinster (June 5)\nMunster : Connacht (June 7)\nMunster : Ulster (June 9)\nMunster : Leinster (June 8)\nLeinster : Connacht (June 10)\nLeinster : Ulster (June 11)\nLeinster : Munster (June 12)\n```",
                                    "solution": "```python\n# list containing teams and match dates\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"] \ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n         \"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n\n# print all match pairings and dates\ni = 0\nfor home in teams: \n    for guest in teams: \n        if home != guest: \n            print(f\"{home} : {guest} ({dates[i]})\")\n            i += 1",
                                    "template": "# list containing teams and match dates\nteams = [\"Connacht\", \"Ulster\", \"Munster\", \"Leinster\"] \ndates = [\"June 1\", \"June 3\", \"June 2\", \"June 4\", \"June 6\", \"June 5\", \\\n         \"June 7\", \"June 9\", \"June 8\", \"June 10\", \"June 11\", \"June 12\"]\n         \n# print all match pairings and dates\n# (fill this in)"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "7jaxwumlh9yc9xoaoafq"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606792",
                        "visible": true,
                        "languages": [],
                        "searchString": "Room Occupancy room occupancy roomoccupancy",
                        "moduleId": "619620e4e5d291b4f0606723",
                        "index": 4,
                        "title": "Room Occupancy",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-03T19:25:13.209Z",
                        "updatedAt": "2022-02-01T08:30:41.004Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e38739dd168a1b52139d7b1",
                                    "programmingLanguage": "python",
                                    "text": "Imagine a small hostel with four four-bed rooms (with the arbitrarily chosen numbers 101, 102, 201, and 202). You want to write a little program for the hostel staff to help them keep track of the room occupancy and checking guests in and out. The code for the user interaction already exists (see below), but you still need to implement the missing functions:\n\n* `print_occupancy` should simply print out a list of all rooms and the guests that are currently checked in.\n* `check_in` should add a guest to a room. If a non-existing room number is\ngiven or if the chosen room is already full, a corresponding message should be printed. There can be two guests with the same name in one room.\n* `check_out` should remove a guest from a room. If a wrong room number or\nguest name is passed, a corresponding message should be printed.\n\nThe code of a possible main program is included in the template below. It hows how the functions are used, and you can also use it to test your implementation.",
                                    "solution": "```python\n# function that prints the current room occupancy\ndef print_occupancy(ro):\n    rooms = list(ro.keys())\n    rooms.sort()\n    for room in rooms:\n        print(f\"{room}: {ro[room]}\")\n\n# function for checking in a guest to a room\ndef checkin(ro, guest, room):\n    if room in ro:\n        if len(ro[room]) < 4:\n            ro[room].append(guest)\n        else:\n            print(f\"Room {room} is already full.\")\n    else:\n        print(\"Room {room} does not exist.\")\n\n# function for checking out a guest from a room\ndef checkout(ro, guest, room):\n    if room in ro:\n        if guest in ro[room]:\n            ro[room].remove(guest)\n        else:\n            print(f\"{guest} is not a guest in room {room}.\")\n    else:\n        print(\"Room {room} does not exist.\")\n\n\n# Main program\nroom_occupancy = {101:[], 102:[], 201:[], 202:[]}\n\nwhile True:\n    print(\"These are your options:\")\n    print(\"1 - View current room occupancy.\")\n    print(\"2 - Check guest in.\")\n    print(\"3 - Check guest out.\")\n    print(\"4 - Exit program.\")\n    choice = input(\"Please choose what you want to do: \")\n\n    if choice == \"1\":\n        print_occupancy(room_occupancy)\n    elif choice == \"2\":\n        guest = input(\"Enter name of guest: \")\n        room = int(input(\"Enter room number: \"))\n        checkin(room_occupancy, guest, room)\n    elif choice == \"3\":\n        guest = input(\"Enter name of guest: \")\n        room = int(input(\"Enter room number: \"))\n        checkout(room_occupancy, guest, room)\n    elif choice == \"4\":\n        print(\"Goodbye!\")\n        break\n    else:\n        print(\"Invalid input, try again.\")",
                                    "template": "# function that prints the current room occupancy\ndef print_occupancy(ro):\n    # (fill this in)\n    \n# function for checking in a guest to a room\ndef checkin(ro, guest, room):\n    # (fill this in)\n    \n# function for checking out a guest from a room\ndef checkout(ro, guest, room):\n    # (fill this in)\n    \n# Main program\nroom_occupancy = {101:[], 102:[], 201:[], 202:[]}\nwhile True:\n\tprint(\"These are your options:\")\n\tprint(\"1 - View current room occupancy.\")\n\tprint(\"2 - Check guest in.\")\n\tprint(\"3 - Check guest out.\")\n\tprint(\"4 - Exit program.\")\n\tchoice = input(\"Please choose what you want to do: \")\n\n\tif choice == \"1\":\n\t\tprint_occupancy(room_occupancy)\n\telif choice == \"2\":\n\t\tguest = input(\"Enter name of guest: \")\n\t\troom = int(input(\"Enter room number: \"))\n\t\tcheck_in(room_occupancy, guest, room)\n\telif choice == \"3\":\n\t\tguest = input(\"Enter name of guest: \")\n\t\troom = int(input(\"Enter room number: \"))\n\t\tcheck_out(room_occupancy, guest, room)\n\telif choice == \"4\":\n\t\tprint(\"Goodbye!\")\n\t\tbreak\n\telse:\n\t\tprint(\"Invalid input, try again.\")"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "wdi6jc8cww3a4j3mykf7"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606790",
                        "visible": true,
                        "languages": [],
                        "searchString": "String Reverse string reverse stringreverse",
                        "moduleId": "619620e4e5d291b4f0606723",
                        "index": 0,
                        "title": "String Reverse",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-03T19:12:50.910Z",
                        "updatedAt": "2022-02-01T08:30:41.004Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "txhmvbvvtgkockph",
                                            "type": "unitTest",
                                            "tests": [
                                                {
                                                    "id": "vD3XB,6zaq15S5ZQN4KM",
                                                    "name": "test_recursive_hello",
                                                    "description": "The recursive implementation should reverse \"hello\" correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_recursive(\"hello\") == \"olleh\""
                                                },
                                                {
                                                    "id": ",k4K0Kzj7iKSwuknS3vZ",
                                                    "name": "test_recursive_password",
                                                    "description": "The recursive implementation should reverse the string \"password\" correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_recursive(\"password\") == \"drowssap\""
                                                },
                                                {
                                                    "id": "kw,4cbmFU0ZQ0JnBExY7",
                                                    "name": "test_recursive_empty",
                                                    "description": "The recursive implementation should reverse the empty string correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_recursive(\"\") == \"\""
                                                },
                                                {
                                                    "id": "ID,4XzX,P3kf8beTFvOT",
                                                    "name": "test_while_hello",
                                                    "description": "The while implementation should reverse the string \"hello\" correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_while(\"hello\") == \"olleh\""
                                                },
                                                {
                                                    "id": "7nZQJl8halK0iyT3FKdS",
                                                    "name": "test_while_password",
                                                    "description": "The while implementation should reverse the string \"password\" correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_while(\"password\") == \"drowssap\""
                                                },
                                                {
                                                    "id": "CW1FGYGJrffTnjd,PRq2",
                                                    "name": "test_while_empty",
                                                    "description": "The while implementation should reverse the empty string correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_while(\"\") == \"\""
                                                },
                                                {
                                                    "id": "IU5IeBWVeXPU9AQX3uhj",
                                                    "name": "test_for_hello",
                                                    "description": "The for implementation should reverse the string \"hello\" correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_for(\"hello\") == \"olleh\""
                                                },
                                                {
                                                    "id": "vKttkla2Zi4hlym4ngCR",
                                                    "name": "test_for_password",
                                                    "description": "The for implementation should reverse the string \"password\" correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_for(\"password\") == \"drowssap\""
                                                },
                                                {
                                                    "id": "VvEn0F9bHXk2WG,nKli8",
                                                    "name": "test_for_empty",
                                                    "description": "The for implementation should reverse the empty string correctly.",
                                                    "isCode": false,
                                                    "code": "reverse_for(\"\") == \"\""
                                                },
                                                {
                                                    "id": "HYsaLLq40,Zmm0rC1G6T",
                                                    "name": "test_equality",
                                                    "description": "All three functions should return the same result.",
                                                    "isCode": false,
                                                    "code": "reverse_recursive(\"hello\") == reverse_while(\"hello\") == reverse_for(\"hello\")"
                                                }
                                            ]
                                        }
                                    ],
                                    "_id": "5e3870b7a14e590a7748f27b",
                                    "programmingLanguage": "python",
                                    "text": "Implement three different variants of a function for reversing a string:\n\n1. `reverse_recursive(string)`, solving the problem recursively\n2. `reverse_while(string)`, solving the problem using a while-loop\n3. `reverse_for(string)`, solving the problem using a for-loop\n\nStrings can be indexed like lists, that is, an expression like `<string>[<index>]` returns the character at the corresponding position in the string. The first character of the string has index `0`, and the last is at position `len(<string>)-1`. A sub-sequence of a string can be obtained by specifying a range of indexes, for example `<string>[1:len(<string>)]` for all characters but the first. ",
                                    "solution": "```python\n# function for reversing a string recursively\n# (Idea: If the string consists only of one letter, the reverse is trivial.\n# If the string is longer, reverse the string from the second character to\n# the end, append the first character to that.)\ndef reverse_recursive(string):\n    if len(string) > 1:\n        return reverse_recursive(string[1:len(string)]) + string[0]\n    else:\n        return string\n\n# function for reversing a string with a while-loop\n# (Idea: Iterate over the characters of the string with a while-loop, \n# in each iteration adding the current letter to the beginning of the \n# reversed string.)\ndef reverse_while(string):\n    i = 0\n    reversed_string = \"\"\n    while i < len(string):\n        reversed_string = string[i] + reversed_string\n        i = i+1\n    return reversed_string\n\n# function for reversing a string with a for-loop\n# (Idea: Same as with the while-loop, but less index management needed.)\ndef reverse_for(string):\n    reversed_string = \"\"\n    for s in string:\n        reversed_string = s + reversed_string\n    return reversed_string\n    \n# test program\nstring_to_reverse = \"This is just a test.\"\nprint(reverse_recursive(string_to_reverse))\nprint(reverse_while(string_to_reverse))\nprint(reverse_for(string_to_reverse))",
                                    "template": "# function for reversing a string recursively\ndef reverse_recursive(string):\n    # (fill this in)\n    \n# function for reversing a string with a while-loop\ndef reverse_while(string):\n    #  (fill this in)\n    \n# function for reversing a string with a for-loop\ndef reverse_for(string):\n    #  (fill this in)\n\n# test program\nstring_to_reverse = \"This is just a test.\"\nprint(reverse_recursive(string_to_reverse))\nprint(reverse_while(string_to_reverse))\nprint(reverse_for(string_to_reverse))"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "yqn15zn12ar7aqebtybc"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606794",
                        "visible": true,
                        "languages": [],
                        "searchString": "Anagram Test anagram test anagramtest",
                        "moduleId": "619620e4e5d291b4f0606723",
                        "index": 3,
                        "title": "Anagram Test",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-03T19:22:17.712Z",
                        "updatedAt": "2022-02-01T08:30:41.004Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "ysezrguexgmnhgnj",
                                            "type": "unitTest",
                                            "tests": [
                                                {
                                                    "id": "nYBTVHlPChc1T,P,WTSS",
                                                    "name": "test_rescue_secure",
                                                    "description": "The result of is_anagram(\"rescue\", \"secure\") should be True.",
                                                    "isCode": false,
                                                    "code": "is_anagram(\"rescue\", \"secure\") == True"
                                                },
                                                {
                                                    "id": "mkbdwgMckUMX2kPXUtnb",
                                                    "name": "test_Rescue_Secure",
                                                    "description": "The result of is_anagram(\"Rescue\", \"Secure\") should be True.",
                                                    "isCode": false,
                                                    "code": "is_anagram(\"Rescue\", \"Secure\") == True"
                                                },
                                                {
                                                    "id": "G9rIYZntJyXcBLPXvNCD",
                                                    "name": "test_Rescue_Anchor",
                                                    "description": "The result of is_anagram(\"Rescue\", \"Anchor\") should be False.",
                                                    "isCode": false,
                                                    "code": "is_anagram(\"Rescue\", \"Anchor\") == False"
                                                },
                                                {
                                                    "id": "EVIX7vL0MT0WVr7jF,uo",
                                                    "name": "test_Ship_Secure",
                                                    "description": "The result of is_anagram(\"Ship\", \"Secure\") should be False.",
                                                    "isCode": false,
                                                    "code": "is_anagram(\"Ship\", \"Secure\") == False"
                                                }
                                            ]
                                        }
                                    ],
                                    "_id": "5e3872ecd168a1482439d7af",
                                    "programmingLanguage": "python",
                                    "text": "An anagram is a word or phrase that is made by rearranging the letters of another word or phrase. For example, \"secure\" is an anagram of \"rescue\". Write a function `is_anagram(word1,word2)` that checks if the two words are anagrams of each other. If so, the function should return `True`, and `False` otherwise. The function should not distinguish between upper- and lower-case letters.",
                                    "solution": "```python\n# Function to test if two words are anagrams.\n# Basic idea: count the number of occurrences of each\n# letter in two dictionaries, then compare if they are the same.\n# (An alternative solution would be to simply sort the strings and \n# compare if they are equal then.)\ndef is_anagram(word1,word2):\n    counts1 = {}\n    for w in word1.lower():\n        if w in counts1:\n            counts1[w] += 1\n        else:\n            counts1[w] = 1\n\n    counts2 = {}\n    for w in word2.lower():\n        if w in counts2:\n            counts2[w] += 1\n        else:\n            counts2[w] = 1\n\n    return counts1 == counts2\n\n\n# Test program\nprint(is_anagram(\"rescue\", \"secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Anchor\")) # should be False\nprint(is_anagram(\"Ship\", \"Secure\")) # should be False",
                                    "template": "def is_anagram(word1,word2):\n    # insert your code here\n\n# Test program\nprint(is_anagram(\"rescue\", \"secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Secure\")) # should be True\nprint(is_anagram(\"Rescue\", \"Anchor\")) # should be False\nprint(is_anagram(\"Ship\", \"Secure\")) # should be False"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "ypnik28zs0onzlp3bm5m"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606795",
                        "visible": true,
                        "languages": [],
                        "searchString": "List of Fibonacci Numbers list of fibonacci numbers listoffibonaccinumbers",
                        "moduleId": "619620e4e5d291b4f0606723",
                        "index": 2,
                        "title": "List of Fibonacci Numbers",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-03T19:19:07.421Z",
                        "updatedAt": "2022-02-01T08:30:41.004Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [
                                        {
                                            "id": "wuxfesifzpinglbu",
                                            "type": "unitTest",
                                            "tests": [
                                                {
                                                    "id": "9qrzhCCk6JBQg7nKJzoS",
                                                    "name": "test_fib_0",
                                                    "description": "The result of fib(0) should be a list \\[1\\].",
                                                    "isCode": false,
                                                    "code": "fib(0) == [1]"
                                                },
                                                {
                                                    "id": "hkL1Ro3tLMfF5Yuc7RVA",
                                                    "name": "test_fib_1",
                                                    "description": "The result of fib(1) should be a list \\[1,1\\].",
                                                    "isCode": false,
                                                    "code": "fib(1) == [1,1]"
                                                },
                                                {
                                                    "id": "9zVrbIi7kMBgkv79FVUT",
                                                    "name": "test_fib_2",
                                                    "description": "The result of fib(2) should be a list \\[1,1,2\\].",
                                                    "isCode": false,
                                                    "code": "fib(2) == [1,1,2]"
                                                },
                                                {
                                                    "id": "jF2rmUi8hjZhkWlBkq4s",
                                                    "name": "test_fib_12",
                                                    "description": "The result of fib(12) should be a list \\[1,1,2,3,5,8,13,21,34,55,89,144,233\\].",
                                                    "isCode": false,
                                                    "code": "fib(12) == [1,1,2,3,5,8,13,21,34,55,89,144,233]"
                                                },
                                                {
                                                    "id": "Lh66vb492TVBw0j2G7UQ",
                                                    "name": "test_fib_negative",
                                                    "description": "The result of fib(-1) should be None.",
                                                    "isCode": false,
                                                    "code": "fib(-1) == None"
                                                }
                                            ]
                                        }
                                    ],
                                    "_id": "5e38722ea14e59792148f27f",
                                    "programmingLanguage": "python",
                                    "text": "Implement a function `fib(n)` that returns a list with the first `n` Fibonacci numbers. If `n==0`, it should directly return the list `[1]`, if `n==1`, it should return `[1,1]`, and if `n>1` it should use `[1,1]` as a start and compute Fibonacci numbers `2` to `n` by always adding the two predecessors in the list. If `n` is not an integer greater or equal to 0, the function should simply return `None`.",
                                    "solution": "```python\n# function that writes the first n fibonacci numbers into a list\ndef fib(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1,1]\n    elif n > 1:\n        numbers = [1,1]\n        next_index = 2\n        while next_index <= n:\n            numbers.append(numbers[next_index-1]+numbers[next_index-2])\n            next_index = next_index + 1\n        return numbers\n    else:\n        return None\n\n# test program\nprint(fib(0))\nprint(fib(1))\nprint(fib(2))\nprint(fib(12))\nprint(fib(-1))",
                                    "template": "def fib(n):\n    # (fill this in)\n\n# test program\nprint(fib(0))\nprint(fib(1))\nprint(fib(2))\nprint(fib(12))\nprint(fib(-1))"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "2q53u9t1cw37z5744b4g"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067d0",
                        "visible": true,
                        "languages": [],
                        "searchString": "Interview Anonymization interview anonymization interviewanonymization",
                        "moduleId": "619620e4e5d291b4f06067a6",
                        "index": 0,
                        "title": "Interview Anonymization",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [
                            {
                                "label": "interview-with-a-syrian-refugee",
                                "extension": ".txt",
                                "mimetype": "text/plain",
                                "_id": "619620e6e5d291b4f06069d3",
                                "updatedAt": "2022-01-25T10:22:00.963Z",
                                "createdAt": "2021-02-08T09:08:03.955Z",
                                "path": "assignment/619620e4e5d291b4f06067d0/files"
                            }
                        ],
                        "createdAt": "2020-02-18T09:16:57.976Z",
                        "updatedAt": "2022-02-01T08:30:48.029Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bab8d0efbad4b024a597b",
                                    "programmingLanguage": "python",
                                    "text": "Imagine you are a journalist, and you have written a text about an interview with somebody. Because the person wants to go unrecognized, you have to replace their name by a fictive one everywhere in the text before it gets published.\n\nWrite a Python program that reads the file containing the interview text, replaces all occurrences of the original name by a new one (the `str.replace()` function can be used here), and saves the changed text in the file. \n\nYou can download and use the example text file \"interview-with-a-syrian-refugee.txt\" or create an own one.\n```button \n\tlabel: \tinterview-with-a-syrian-refugee\n\ttext: \tDownload example text file\n```",
                                    "solution": "```python\n# set file names\ninterview_file = \"interview-with-a-syrian-refugee.txt\"\nnew_file = \"interview-with-a-syrian-refugee-anonymized.txt\"\n\ntry:\n    # read original interview text from file\n    with open(interview_file, \"r\") as file:\n        text = file.read()\n\n    # write obfuscated interview text to file\n    with open(new_file, \"w\") as file:\n        file.write(text.replace(\"Samira\",\"Amal\"))\n\n# if interview file is not found, inform user accordingly\nexcept FileNotFoundError:\n    print(f\"File {interview_file} not found.\")\n\n# for any other error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err)"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "txq3c202o2nsildes4di"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067cc",
                        "visible": true,
                        "languages": [],
                        "searchString": "Longest Word longest word longestword",
                        "moduleId": "619620e4e5d291b4f06067a6",
                        "index": 1,
                        "title": "Longest Word",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-18T10:56:50.692Z",
                        "updatedAt": "2022-02-01T08:30:48.025Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bc2fe9bb9245d7c48127e",
                                    "programmingLanguage": "python",
                                    "text": "Reuse your code from the \"Text Analysis\" exercise (Module 5) to create a function that finds the longest word in a given text. Apply it to the text file that you used for the previous exercise (\"Interview Anonymization\"). The output should be something like:\n\n`The longest word in the text is \"responsibility\".`\n",
                                    "solution": "```python\n# function to find the longest word in a text\ndef find_longest_word(text):\n    # initialize running length counter and word\n    length = 0\n    word = \"\"\n    \n    # initialize variables for storing the max. length and longest word\n    max_length = 0\n    longest_word = \"\"\n    \n    # for all characters in the text ...\n    for character in text:\n        \n        # check if the character is a letter (part of a word).\n        if character.isalpha():\n            # if yes, increment the length counter and \n            # add the character to the word to remember\n            length += 1\n            word += character\n        else:\n            # if not, check if the last word was longer then the previous longest word\n            if length > max_length:\n                # if yes, remember the new max. length and longest word\n                max_length = length\n                longest_word = word\n            # reset running variables\n            length = 0\n            word = \"\"\n    \n    return longest_word\n    \n# main program\ntext_file = \"interview-with-a-syrian-refugee.txt\"\n\ntry:\n    # read original interview text from file\n    with open(text_file, \"r\") as file:\n        text = file.read()\n\n# if input file is not found, inform user accordingly\nexcept FileNotFoundError:\n    print(f\"File {text_file} not found.\")\n\n# for any other error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err)\n    \n# print result\nprint(f\"The longest word in the text is \\\"{find_longest_word(text)}\\\".\")\n",
                                    "template": "# function to find the longest word in a text\ndef find_longest_word(text):\n    # (insert code to implement the function here)\n    # ...\n    return longest_word\n    \n# main program \ntext_file = \"interview-with-a-syrian-refugee.txt\"\n# (insert code to read the file and apply function here)"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "93q3sjm3vjq3iu7db0ga"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067cf",
                        "visible": true,
                        "languages": [],
                        "searchString": "Randomized Story-Telling randomized story-telling randomized story telling randomizedstorytelling",
                        "moduleId": "619620e4e5d291b4f06067a6",
                        "index": 2,
                        "title": "Randomized Story-Telling",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [
                            {
                                "label": "inputs",
                                "extension": ".csv",
                                "mimetype": "text/csv",
                                "_id": "619620e6e5d291b4f06069d7",
                                "updatedAt": "2022-01-25T10:22:00.990Z",
                                "createdAt": "2021-02-08T09:08:03.944Z",
                                "path": "assignment/619620e4e5d291b4f06067cf/files"
                            }
                        ],
                        "createdAt": "2020-02-18T11:50:29.040Z",
                        "updatedAt": "2022-02-01T08:30:48.029Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bcf889bb92475ce481282",
                                    "programmingLanguage": "python",
                                    "text": "One of the simple pen-and-paper games I remember from my childhood days goes as follows: A paper sheet is divided into four columns for the questions “Who?”, “Does what?”, “How?” and “Where?”. The first player would write down a person in the first column, then fold it away, the second would fill in a verb, fold it away, etc. After the fourth column has been filled, the complete sentence is read out. It could then be something like *“My brother is showering happily at the gas station.”* \n\nWrite a program that creates a user-defined number of such random sentences. The file “inputs.csv” contains a list of possible answers to all of the four questions. Take the values from there. Feel free to add further words to the CSV file to create more variation. \n\nThe output of the program should be something like:\n\n```\nHow many sentences do you want to create? 3\nMy granny is drinking massively at the fair.\nThe butcher is travelling aggressively in bed.\nMy grandpa is reading nicely in the bathroom.\n```\n```button\n\tlabel: inputs\n\ttext: Download inputs.csv\n",
                                    "solution": "```python\nimport pandas as pd\nimport sys\nimport random\n\n# set path to input file\ninfile = \"inputs.csv\"\n\ntry:\n    # read input file as dataframe\n    df_in = pd.read_csv(infile, sep=\",\")\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n\n\n# ask user how many sentences should be created\nwhile True:\n    try:\n        number = int(input(\"How many sentences do you want to create? \"))\n        break\n    except ValueError:\n        print(\"That was no valid number. Try again.\") \n    \n# create the desired number of sentences\nwhile number > 0:\n\n    # select a random value for each of the four sentence elements\n    who = df_in.loc[random.randint(0,df_in[\"who\"].size-1),\"who\"]\n    does_what = df_in.loc[random.randint(0,df_in[\"does what\"].size-1),\"does what\"]\n    how = df_in.loc[random.randint(0,df_in[\"how\"].size-1),\"how\"]\n    where = df_in.loc[random.randint(0,df_in[\"where\"].size-1),\"where\"]\n    \n    print(f\"{who} {does_what} {how} {where}.\")\n\n    number -= 1"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "7hmd5wvqzsoveguelgg7"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067ce",
                        "visible": true,
                        "languages": [],
                        "searchString": "Error Handling error handling errorhandling",
                        "moduleId": "619620e4e5d291b4f06067a6",
                        "index": 4,
                        "title": "Error Handling",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-18T12:00:23.141Z",
                        "updatedAt": "2022-03-09T12:35:04.433Z",
                        "__v": 0,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd1e69bb924f73b48128a",
                                    "text": "If you have not done it yet, add adequate \"try and except\" error handling to your code for the four coding exercises of this module. \n\nInclude it in all code that you write from now on, at least when dealing with user inputs, file reading/writing operations, and accessing resources or services on the web."
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "in8nrey0i7e773wwib6b"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067d1",
                        "visible": true,
                        "languages": [],
                        "searchString": "Population and Universities per Province population and universities per province populationanduniversitiesperprovince",
                        "moduleId": "619620e4e5d291b4f06067a6",
                        "index": 3,
                        "title": "Population and Universities per Province",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [
                            {
                                "label": "dutch_municipalities",
                                "extension": ".csv",
                                "mimetype": "text/csv",
                                "_id": "619620e6e5d291b4f06069e0",
                                "updatedAt": "2022-01-25T10:22:01.016Z",
                                "createdAt": "2021-02-08T09:08:03.957Z",
                                "path": "assignment/619620e4e5d291b4f06067d1/files"
                            }
                        ],
                        "createdAt": "2020-02-18T11:56:24.371Z",
                        "updatedAt": "2022-02-01T08:30:48.029Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd0eb9bb924480b481286",
                                    "programmingLanguage": "python",
                                    "text": "Write a Python program that reads in the CSV file \"dutch_municipalities.csv\" that we already used in the lecture. Sum up the murders and inhabitants for each province and write the result into a new CSV file \"dutch_provinces.csv”, in alphabetical order of the province names. \n\nIts content should look like:\n\n```\nprovince,population,murders\nDrenthe,488892,0\nFlevoland,400179,5\nFriesland,580537,2\n[...]\nUtrecht,1254034,6\nZeeland,380619,3\nZuid-Holland,3579503,22\n```\n\n```button\n\tlabel: dutch_municipalities\n\ttext: Download dutch_municipalities.csv\n\t\n\t",
                                    "solution": "```python\nimport pandas as pd\nimport sys\n\n# set paths to input and output file\ninfile = \"dutch_municipalities.csv\"\noutfile = \"provinces_and_murders.csv\"\n\ntry:\n    # read input file as dataframe\n    df_in = pd.read_csv(infile, sep=\"\\t\")\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n\n# init new empty dataframe with the wanted columns\ndf_out = pd.DataFrame(columns=[\"province\", \"population\", \"murders\"])\n\n# get province names (as sorted set)\nprovinces = sorted(set(df_in[\"province\"]))\n\n# for all provinces ...\nfor province in provinces:\n    # get the part of the dataframe for the province\n    df_province = df_in[df_in[\"province\"]==province]\n    \n    # sum up murders and population and add to new data frame\n    df_out = df_out.append({\"province\":province,\\\n                            \"population\":df_province[\"population\"].sum(),\\\n                            \"murders\":df_province[\"murders_2014\"].sum()},\\\n                            ignore_index=True)\n  \ntry:\n    # save new dataframe as csv file\n    df_out.to_csv(outfile, index=False)\n\n# for any error, display the exception message\nexcept Exception as err:\n    print(\"Something went wrong...\")\n    print(err) \n    sys.exit()\n    \n\n# Another possible, but longer solution is with the csv package and \n# dictionaries, as shown below (without try/except error handling).\n#\n# import csv\n#\n## create two empty dictionaries to collect the aggregated data\n#murders_per_province = {}\n#population_per_province = {}\n#\n## read in the data and iterate over all rows, adding up\n## population and murder numbers per province\n#with open(\"dutch_municipalities.csv\", \"r\") as csvfile:\n#    csvreader = csv.DictReader(csvfile, delimiter='\\t')\n#    for row in csvreader:\n#        if row[\"province\"] not in murders_per_province:\n#            murders_per_province[row[\"province\"]] = int(row[\"murders_2014\"])\n#        else:\n#            murders_per_province[row[\"province\"]] += int(row[\"murders_2014\"])\n#        if row[\"population\"] != \"\":\n#            if row[\"province\"] not in population_per_province:\n#                    population_per_province[row[\"province\"]] = \\\n#                        int(row[\"population\"])\n#            else:\n#                population_per_province[row[\"province\"]] += \\\n#                        int(row[\"population\"])\n#\n## write aggregated data into new CSV file\n#with open(\"provinces_and_murders.csv\", \"w\") as csvfile:\n#    csvwriter = csv.DictWriter(csvfile, fieldnames=[\"province\", \\\n#                                \"population\", \"murders\"], delimiter=\",\")\n#    csvwriter.writeheader()\n#    for province in sorted(murders_per_province):\n#        csvwriter.writerow({\"province\":province, \\\n#            \"population\":population_per_province[province],\\\n#            \"murders\":murders_per_province[province]})"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "v1xd57ns19m59bdl739n"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067cd",
                        "visible": true,
                        "languages": [],
                        "searchString": "Extra extra",
                        "moduleId": "619620e4e5d291b4f06067a6",
                        "index": 5,
                        "title": "Extra",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-02-18T12:04:59.675Z",
                        "updatedAt": "2022-02-01T08:30:48.025Z",
                        "__v": 0,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd2ef9bb924c95c48128e",
                                    "text": "The storytelling exercise was hopefully a bit of fun, but of course we generated a very simple kind of prose text there. The website https://eh.bard.edu/2016/11/07/generating-algorithmic-poetry/ shows how to use Python to automatically generate poems in the style\nof Shakespeare or Dickinson. Have a look if you find that interesting!"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "by7q3xlupj0lkbutyko6"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f0606797",
                        "visible": true,
                        "searchString": "Reading Content from the Web reading content from the web readingcontentfromtheweb",
                        "moduleId": "619620e4e5d291b4f060672c",
                        "index": 0,
                        "title": "Reading Content from the Web",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-17T16:17:30.331Z",
                        "updatedAt": "2022-02-01T08:30:58.333Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "r7isndesbqonx7ct3064"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606798",
                        "visible": true,
                        "searchString": "Calling REST Web Services with GET calling rest web services with get callingrestwebserviceswithget",
                        "moduleId": "619620e4e5d291b4f060672c",
                        "index": 1,
                        "title": "Calling REST Web Services with GET",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-17T16:23:11.910Z",
                        "updatedAt": "2022-02-01T08:30:58.333Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "webtfw7tuqi669352tsb"
                    },
                    {
                        "_id": "619620e4e5d291b4f060679a",
                        "visible": true,
                        "searchString": "Calling REST Web Services with POST calling rest web services with post callingrestwebserviceswithpost",
                        "moduleId": "619620e4e5d291b4f060672c",
                        "index": 2,
                        "title": "Calling REST Web Services with POST",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [
                            {
                                "label": "qrcode",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 250,
                                "cropHeight": 250,
                                "_id": "619620e4e5d291b4f060681c",
                                "updatedAt": "2022-01-25T10:22:00.744Z",
                                "createdAt": "2021-03-05T08:40:28.810Z",
                                "path": "assignment/619620e4e5d291b4f060679a/files"
                            }
                        ],
                        "createdAt": "2020-03-17T16:29:19.607Z",
                        "updatedAt": "2022-02-01T08:30:58.335Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "yg14wbkoxwabokem5e7e"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067c3",
                        "visible": true,
                        "languages": [],
                        "searchString": "Analysis of the McDonald’s Menu analysis of the mcdonald’s menu analysis of the mcdonald s menu analysisofthemcdonaldsmenu analysis of the mcdonalds menu analysis of the mcdonald menu",
                        "moduleId": "619620e4e5d291b4f0606770",
                        "index": 0,
                        "title": "Analysis of the McDonald’s Menu",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [
                            {
                                "label": "mcdonalds_menu",
                                "extension": ".csv",
                                "mimetype": "text/csv",
                                "_id": "619620e5e5d291b4f0606864",
                                "updatedAt": "2022-01-25T10:22:01.030Z",
                                "createdAt": "2021-03-14T12:07:49.964Z",
                                "path": "assignment/619620e4e5d291b4f06067c3/files"
                            },
                            {
                                "label": "q2",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 389,
                                "cropHeight": 376,
                                "_id": "619620e5e5d291b4f0606865",
                                "updatedAt": "2022-01-25T10:22:01.030Z",
                                "createdAt": "2021-03-14T12:07:49.964Z",
                                "path": "assignment/619620e4e5d291b4f06067c3/files"
                            },
                            {
                                "label": "q4",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 378,
                                "cropHeight": 476,
                                "_id": "619620e5e5d291b4f0606866",
                                "updatedAt": "2022-01-25T10:22:01.030Z",
                                "createdAt": "2021-03-14T12:07:49.964Z",
                                "path": "assignment/619620e4e5d291b4f06067c3/files"
                            },
                            {
                                "label": "q6",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 728,
                                "cropHeight": 711,
                                "_id": "619620e5e5d291b4f0606867",
                                "updatedAt": "2022-01-25T10:22:01.030Z",
                                "createdAt": "2021-03-14T12:07:49.966Z",
                                "path": "assignment/619620e4e5d291b4f06067c3/files"
                            },
                            {
                                "label": "q1",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 513,
                                "cropHeight": 445,
                                "_id": "619620e5e5d291b4f0606868",
                                "updatedAt": "2022-01-25T10:22:01.030Z",
                                "createdAt": "2021-03-19T14:35:55.431Z",
                                "path": "assignment/619620e4e5d291b4f06067c3/files"
                            }
                        ],
                        "createdAt": "2020-02-18T12:14:49.894Z",
                        "updatedAt": "2022-02-01T08:31:04.666Z",
                        "__v": 0,
                        "metadata": {
                            "content": [
                                {
                                    "contentType": "text",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd58a9bb9244c6448129c",
                                    "text": "This exercise is a variation of one that Adrien Melquiond (Utrecht Bioinformatics Center) developed in the scope of another Python course. It uses the Pandas and NumPy libraries to analyze the dataset in the file “mcdonalds_menu.csv”, which provides a nutrition analysis of every menu item on the US McDonald's menu (including breakfast, beef burgers, chicken and fish sandwiches, fries, salads, soda, coffee and tea, milkshakes, and desserts). These data have been scraped from the McDonald's website. The assignment is basically about exploring how much fat and other nutrients are contained in McDonald’s food. \n\n```button\n\tlabel: mcdonalds_menu\n\ttext: Download mcdonalds_menu.csv\n```\n\nYou can use the following code (which reads the content of the file into a data frame and displays simple descriptive statistics about the numerical values in the data frame) as a basis for writing the code to answer the six questions below. Note that you might need Google’s help for some, and number 2 is probably the most difficult one.\n\n```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# import menu and display the first two rows of the dataframe\nmenu = pd.read_csv(\"mcdonalds_menu.csv\")\nprint(menu.head(5))\n\n# display simple statistics about the data frame\nprint(menu.describe())"
                                },
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd7469bb9249a4f4812a1",
                                    "programmingLanguage": "python",
                                    "text": "Question 1: **What do we have on the menu?**\n\nHow many different items do we have on the menu? Print out the number of items. It should be something like:\n```\nTotal number of items: 260\n```\n\nWhich category is the most represented in this menu? Use a barplot to display the number of items per category. It should look something like:\n```file\n\tlabel: q1\n\tsize: small",
                                    "solution": "```python\n# determine and print number of items \nprint(\"Total number of items:\", len(menu.Item.unique()))\n\n# create and show barplot of categories\nmenu.groupby('Category')['Item'].count().plot(kind='bar')\nplt.show()\n",
                                    "template": "# determine and print number of items \n# (fill this in)\n\n# create and show barplot of categories\n# (fill this in)\nplt.show()"
                                },
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd8069bb924181a4812a2",
                                    "programmingLanguage": "python",
                                    "text": "Question 2: **What is the most fatty item for each category?**\n\nBackground information: When it comes to fat, trans fats are really the ones to avoid. Trans fat is a byproduct of a process called hydrogenation that is used to turn healthy oils into solids and to prevent them from becoming rancid. It increases the amount of harmful LDL cholesterol in the bloodstream. Cholesterol can be either good (HDL) or bad (LDL) but chances are slim that we are talking about the good one here. Saturated fat is not necessarily bad, but diet rich in saturated fat can drive up total cholesterol, with increased risk of clogged arteries. Unsaturated fat are not reported in this table.\n\nFirst, use a boxplot to show the spread of 'Total Fat (% Daily Value)' values per category. This should look something like:\n```file\n\tlabel: q2\n\tsize: small\n```\n\nThen create a subset data frame, called `grp_by_category`, that lists per category the maximal amount of 'Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)' and 'Cholesterol (% Daily Value)'. \nThe result should look something like: \n```\n             Category  Max_Fat    ...   Max_Sat_Fat  Max_Cholestrol\n0         Beef & Pork       66    ...            96              53\n1           Beverages        4    ...             8               3\n2           Breakfast       93    ...           100             192\n3      Chicken & Fish      182    ...           101              89\n4        Coffee & Tea       48    ...           101              32\n5            Desserts       19    ...            35              10\n6              Salads       33    ...            29              29\n7  Smoothies & Shakes       50    ...           102              30\n8      Snacks & Sides       37    ...            27              16\n[9 rows x 5 columns]\n```\n\nMerge the data frames `menu` and `grp_by_category` and create a mask to select the items that correspond to the maximal 'Total Fat (% Daily Value)'. Be careful, you may end up with more than one fattest item per category. The result should look something like: \n```\n\t\t       Category     ...     Cholesterol (% Daily Value)\n32            Breakfast     ...                             192\n47          Beef & Pork     ...                              53\n82       Chicken & Fish     ...                              89\n85               Salads     ...                              23\n88               Salads     ...                              17\n98       Snacks & Sides     ...                               0\n103            Desserts     ...                               0\n130           Beverages     ...                               3\n231        Coffee & Tea     ...                              32\n253  Smoothies & Shakes     ...                              25\n258  Smoothies & Shakes     ...                              20\n[11 rows x 4 columns]\n```\n\nRepeating the same process, extract now the fattest item in 'Trans fat' (make sure to select only items with Trans fat > 0). Sort them by decreasing order of Trans fat. The result should look something like: \n```\n               Category        ...   Cholesterol (% Daily Value)\n47          Beef & Pork        ...                            53\n26            Breakfast        ...                            99\n228        Coffee & Tea        ...                            32\n231        Coffee & Tea        ...                            32\n247  Smoothies & Shakes        ...                            20\n256  Smoothies & Shakes        ...                            19\n[…]\n241  Smoothies & Shakes        ...                            20\n82       Chicken & Fish        ...                            89\n258  Smoothies & Shakes        ...                            20\n[19 rows x 6 columns]\n\n```\n",
                                    "solution": "```python\n# create and show boxplot to show the spread of total fat per category\nmenu.boxplot(column=['Total Fat (% Daily Value)'], by=['Category'], rot=90)\nplt.show()\n\n# group by category\ngrp_by_category = menu[['Category', 'Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)', 'Cholesterol (% Daily Value)' ]].groupby(['Category']).max() #extracting the wanted columns, grouping by categories and calculating the max\ngrp_by_category.reset_index(inplace=True) #resetting the index (otherwise category is the new index and it messes up with merge)\ngrp_by_category.columns=['Category', 'Max_Fat', 'Max_Trans_Fat', 'Max_Sat_Fat', 'Max_Cholestrol'] #renaming the columns\nprint(grp_by_category) #displaying the new dataframe\n\n# merge menu and data frame grouped by category\ndf = menu.merge(grp_by_category) #merging the two dataframes by the only common column (\"Category\")\nmask = df['Total Fat (% Daily Value)'] == df.Max_Fat #creating the mask that will be used for the selection\nfatty_menu = df.loc[mask, ['Category','Item','Total Fat (% Daily Value)','Cholesterol (% Daily Value)']] #selection the items that correspond to the max of total fat (%daily value) per category\nprint(fatty_menu) #displaying the dataframe\n\n# extract fattest item in 'Trans Fat'\ntrans_menu = df.loc[(df['Trans Fat'] == df.Max_Trans_Fat) & (df['Trans Fat']>0)][['Category','Item','Total Fat (% Daily Value)','Trans Fat','Saturated Fat (% Daily Value)','Cholesterol (% Daily Value)']] #creating a new filter\nprint(trans_menu.sort_values(by='Trans Fat',ascending=False)) #displaying the dataframe sorted by Trans Fat (decreasing order)",
                                    "template": "# create and show boxplot to show the spread of total fat per category\n# ((fill this in)\nplt.show()\n\n# group by category\n# (fill this in)\nprint(grp_by_category) #displaying the new dataframe\n\n# merge menu and data frame grouped by category\n# (fill this in)\nprint(fatty_menu) #displaying the dataframe\n\n# extract fattest item in 'Trans Fat'\n# (fill this in)\nprint(trans_menu) #displaying the dataframe"
                                },
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd8bf9bb92448724812a3",
                                    "programmingLanguage": "python",
                                    "text": "Question 3: **Is there anything healthy on the menu?**\n\nSearch for items with 0 'Trans fat' and 'Cholesterol (% Daily Value)', and maximum 20 'Sugars' and 'Total Fat (% Daily Value)'. Sort the healthy items per calories in ascending order. Remove from this healthy data frame all the drinks (beverages, coffee & tea). The result should look something like: \n```\n           Category                Item  Calories\n103        Desserts     Baked Apple Pie       250\n96   Snacks & Sides  Small French Fries       230\n38        Breakfast          Hash Brown       150\n99   Snacks & Sides   Kids French Fries       110\n100  Snacks & Sides          Side Salad        20\n101  Snacks & Sides        Apple Slices        15\n```\n",
                                    "solution": "```python\n# create data frame of healthy item s\nhealthy = df.loc[(df['Trans Fat']==0) & (df['Sugars']<20) & (df['Total Fat (% Daily Value)']<=20) & (df['Cholesterol (% Daily Value)']==0), ['Category','Item','Calories']].sort_values('Calories', ascending=False)\nprint(healthy[(healthy['Category']!=\"Beverages\") & (healthy['Category']!=\"Coffee & Tea\")])\n\n",
                                    "template": "# create data frame of healthy items\n# (fill this in)\nprint(healthy) #displaying the dataframe\n"
                                },
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bd9ca9bb92429854812a6",
                                    "programmingLanguage": "python",
                                    "text": "Question 4: **What are the 10 items that have the highest content of Vitamin C?**\n\nCitrus fruits are the high source of Vitamin C. For adults, the recommended dietary reference intake for vitamin C is 65 to 90 milligrams (mg) a day, and the upper limit is 2,000 mg a day. Using pandas' function pivot_table(), make a barplot that shows the 'Vitamin C (% Daily Value)' for the ten items that contain the highest amount of vitamin C. The result should look something like:\n```file\n\tlabel: q4\n\tsize: small\n```\n",
                                    "solution": "```python\n# barplot of top 10 vitamin C\npd.pivot_table(menu, index=['Item'], values=['Vitamin C (% Daily Value)']).sort_values(['Vitamin C (% Daily Value)'], ascending=False)[:10].plot(kind=\"bar\")\nplt.show()",
                                    "template": "# barplot of top 10 vitamin C\n# (fill this in)\nplt.show()"
                                },
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bda0d9bb924d9874812a7",
                                    "programmingLanguage": "python",
                                    "text": "Question 5: **What is the best “muscle food” on the menu?**\n\nLet's assume we want to get a lot of proteins but as little sugar as possible. Identify the top three items based on their protein/sugars ratio. The result should look something like: \n```\n          Category      ...      Protein/Sugar\n82  Chicken & Fish      ...               87.0\n3        Breakfast      ...               10.5\n4        Breakfast      ...               10.5\n```",
                                    "solution": "```python\n# top 3 muscle food\nmenu['Protein/Sugar'] = np.where(menu['Sugars'] < 1, menu['Sugars'], menu['Protein']/menu['Sugars'])\nprint(menu.sort_values('Protein/Sugar', ascending=False).head(3))",
                                    "template": "# get top 3 muscle food\n# (fill me in)\nprint(top_3_muscle_food)"
                                },
                                {
                                    "contentType": "codeQuestion",
                                    "choices": [],
                                    "actions": [],
                                    "_id": "5e4bdb419bb92483c24812a8",
                                    "programmingLanguage": "python",
                                    "text": "Question 6: **How do the nutrition features compare to each other?**\n\nLet's finally take a look at how one feature feeds into the other. Using pandas.plotting.scatter_matrix(), we can plot multiple scatterplots and get a quick feel for the data. Plot a multiple scatterplot for all the following columns in your dataframe: 'Calories', 'Total Fat', 'Saturated Fat', 'Cholesterol', 'Sodium', 'Carbohydrates', 'Sugars', 'Protein'. The result should look something like: \n```file\n\tlabel: q6\n\tsize: small\n```\n\nWhat can you observe from the (anti)correlations of the nutritional metrics?",
                                    "solution": "# nutrition feature comparison\nselection = menu.loc[:,['Calories', 'Total Fat', 'Saturated Fat', 'Cholesterol', 'Sodium', 'Carbohydrates', 'Sugars', 'Protein']]\npd.plotting.scatter_matrix(selection, diagonal='kde', figsize=(12,12), grid=True)\nplt.show()",
                                    "template": "# create multiple scatter plot for nutrition feature comparison\n# (fill this in)\nplt.show()"
                                }
                            ]
                        },
                        "keywords": [],
                        "publicKey": "93bxrj533qenlwgerp3b"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f0606772",
                        "visible": true,
                        "searchString": "String Reformatting string reformatting stringreformatting",
                        "moduleId": "619620e4e5d291b4f06066ff",
                        "index": 3,
                        "title": "String Reformatting",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T15:06:00.330Z",
                        "updatedAt": "2022-02-01T08:31:10.859Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "ypq4fwz038w7nt233raf"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606773",
                        "visible": true,
                        "searchString": "Writing Regular Expressions writing regular expressions writingregularexpressions",
                        "moduleId": "619620e4e5d291b4f06066ff",
                        "index": 1,
                        "title": "Writing Regular Expressions",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T15:00:36.358Z",
                        "updatedAt": "2022-02-01T08:31:10.859Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "23u2dr9483r56rssax02"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606774",
                        "visible": true,
                        "searchString": "RegEx Puzzles regex puzzles regexpuzzles",
                        "moduleId": "619620e4e5d291b4f06066ff",
                        "index": 4,
                        "title": "RegEx Puzzles",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T15:39:21.746Z",
                        "updatedAt": "2022-02-01T08:31:10.859Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "usa5m0kx4ugz0mlhdq15"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606776",
                        "visible": true,
                        "searchString": "Information from a Database Entry information from a database entry informationfromadatabaseentry",
                        "moduleId": "619620e4e5d291b4f06066ff",
                        "index": 2,
                        "title": "Information from a Database Entry",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T15:02:31.154Z",
                        "updatedAt": "2022-02-01T08:31:10.859Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "5bxp78bhs342jciudoas"
                    },
                    {
                        "_id": "619620e4e5d291b4f0606777",
                        "visible": true,
                        "searchString": "Understanding Regular Expressions understanding regular expressions understandingregularexpressions",
                        "moduleId": "619620e4e5d291b4f06066ff",
                        "index": 0,
                        "title": "Understanding Regular Expressions",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T14:54:59.175Z",
                        "updatedAt": "2022-02-01T08:31:10.859Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "di1xlbrctkvkvxmi8d24"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f0606779",
                        "visible": true,
                        "searchString": "Python and Functional Programming python and functional programming pythonandfunctionalprogramming",
                        "moduleId": "619620e4e5d291b4f0606710",
                        "index": 4,
                        "title": "Python and Functional Programming",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T10:08:23.209Z",
                        "updatedAt": "2022-02-01T08:31:19.477Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "th0qaxavkorgxovvdcef"
                    },
                    {
                        "_id": "619620e4e5d291b4f060677b",
                        "visible": true,
                        "searchString": "People at the University people at the university peopleattheuniversity",
                        "moduleId": "619620e4e5d291b4f0606710",
                        "index": 2,
                        "title": "People at the University",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [
                            {
                                "label": "personsatuniversity",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 390,
                                "cropHeight": 350,
                                "_id": "619620e4e5d291b4f06067e0",
                                "updatedAt": "2022-01-25T10:22:00.623Z",
                                "createdAt": "2021-03-15T08:25:34.448Z",
                                "path": "assignment/619620e4e5d291b4f060677b/files"
                            }
                        ],
                        "createdAt": "2020-03-19T09:46:57.528Z",
                        "updatedAt": "2022-02-01T08:31:19.480Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "jadaovha0w5x52jaxeoy"
                    },
                    {
                        "_id": "619620e4e5d291b4f060677c",
                        "visible": true,
                        "searchString": "Text Analysis with Higher-Order Functions text analysis with higher-order functions text analysis with higher order functions textanalysiswithhigherorderfunctions",
                        "moduleId": "619620e4e5d291b4f0606710",
                        "index": 3,
                        "title": "Text Analysis with Higher-Order Functions",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T09:59:55.875Z",
                        "updatedAt": "2022-02-01T08:31:19.477Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "g50jjjsmhvack8zxt6ii"
                    },
                    {
                        "_id": "619620e4e5d291b4f060677d",
                        "visible": true,
                        "searchString": "Room Occupancy Revisited room occupancy revisited roomoccupancyrevisited",
                        "moduleId": "619620e4e5d291b4f0606710",
                        "index": 1,
                        "title": "Room Occupancy Revisited",
                        "files": [],
                        "createdAt": "2021-03-21T14:01:42.276Z",
                        "updatedAt": "2022-02-01T08:31:19.477Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "8n32znf3fouvbkxybvz1"
                    },
                    {
                        "_id": "619620e4e5d291b4f060677a",
                        "visible": true,
                        "searchString": "Additional Practice in Mastery Grids additional practice in mastery grids additionalpracticeinmasterygrids",
                        "moduleId": "619620e4e5d291b4f0606710",
                        "index": 0,
                        "title": "Additional Practice in Mastery Grids",
                        "isOptional": true,
                        "difficulty": 0,
                        "files": [],
                        "createdAt": "2020-03-19T09:43:33.454Z",
                        "updatedAt": "2022-02-01T08:31:19.477Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "lc9jhi3pcnd3mum3qoqb"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067a8",
                        "visible": true,
                        "searchString": "QR Code Generator with GUI qr code generator with gui qrcodegeneratorwithgui",
                        "moduleId": "619620e4e5d291b4f060673d",
                        "index": 1,
                        "title": "QR Code Generator with GUI",
                        "isOptional": false,
                        "difficulty": 0,
                        "files": [
                            {
                                "label": "gui",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 448,
                                "cropHeight": 330,
                                "_id": "619620e4e5d291b4f0606832",
                                "updatedAt": "2022-01-25T10:22:00.786Z",
                                "createdAt": "2021-03-15T08:25:48.514Z",
                                "path": "assignment/619620e4e5d291b4f06067a8/files"
                            }
                        ],
                        "createdAt": "2020-03-19T11:46:38.133Z",
                        "updatedAt": "2022-02-01T08:31:25.761Z",
                        "__v": 0,
                        "hideSolutions": true,
                        "keywords": [],
                        "publicKey": "8omcybxrq7v6q9w3be3x"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067aa",
                        "visible": true,
                        "searchString": "Number Guessing with GUI number guessing with gui numberguessingwithgui",
                        "moduleId": "619620e4e5d291b4f060673d",
                        "index": 0,
                        "title": "Number Guessing with GUI",
                        "files": [
                            {
                                "label": "nggui1",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 307,
                                "cropHeight": 68,
                                "_id": "619620e4e5d291b4f0606838",
                                "updatedAt": "2022-01-25T10:22:00.800Z",
                                "createdAt": "2021-03-21T15:46:43.497Z",
                                "path": "assignment/619620e4e5d291b4f06067aa/files"
                            },
                            {
                                "label": "nggui2",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 307,
                                "cropHeight": 68,
                                "_id": "619620e4e5d291b4f0606839",
                                "updatedAt": "2022-01-25T10:22:00.800Z",
                                "createdAt": "2021-03-21T15:46:48.408Z",
                                "path": "assignment/619620e4e5d291b4f06067aa/files"
                            },
                            {
                                "label": "nggui3",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 307,
                                "cropHeight": 68,
                                "_id": "619620e4e5d291b4f060683a",
                                "updatedAt": "2022-01-25T10:22:00.800Z",
                                "createdAt": "2021-03-21T15:46:54.171Z",
                                "path": "assignment/619620e4e5d291b4f06067aa/files"
                            }
                        ],
                        "createdAt": "2021-03-21T15:45:47.423Z",
                        "updatedAt": "2022-02-01T08:31:25.761Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "327fpxewpy5birx1j34m"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f06067c1",
                        "visible": true,
                        "searchString": "Many Fibonacci Numbers many fibonacci numbers manyfibonaccinumbers",
                        "moduleId": "619620e4e5d291b4f0606768",
                        "index": 1,
                        "title": "Many Fibonacci Numbers",
                        "files": [],
                        "createdAt": "2021-03-29T18:24:18.615Z",
                        "updatedAt": "2022-02-01T08:31:31.690Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "t1mtp4k74pnskvv9j68n"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067c0",
                        "visible": true,
                        "searchString": "Pasta with Tomato Sauce pasta with tomato sauce pastawithtomatosauce",
                        "moduleId": "619620e4e5d291b4f0606768",
                        "index": 0,
                        "title": "Pasta with Tomato Sauce",
                        "files": [
                            {
                                "label": "uml_example2",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 1150,
                                "cropHeight": 220,
                                "_id": "619620e5e5d291b4f06068b6",
                                "updatedAt": "2022-01-25T10:22:01.070Z",
                                "createdAt": "2021-03-29T18:18:57.604Z",
                                "path": "assignment/619620e4e5d291b4f06067c0/files"
                            }
                        ],
                        "createdAt": "2021-03-29T18:18:12.463Z",
                        "updatedAt": "2022-02-01T08:31:31.691Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "19sc9h872ev5ovxie3mu"
                    },
                    {
                        "_id": "619620e4e5d291b4f06067c2",
                        "visible": true,
                        "searchString": "Extra extra",
                        "moduleId": "619620e4e5d291b4f0606768",
                        "index": 2,
                        "title": "Extra",
                        "files": [],
                        "createdAt": "2021-03-29T18:26:47.660Z",
                        "updatedAt": "2022-02-01T08:31:31.690Z",
                        "__v": 0,
                        "isOptional": true,
                        "keywords": [],
                        "publicKey": "o15q9k4h8ed49g82xlt6"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f0606796",
                        "visible": true,
                        "searchString": "Bundle Modules 1-14 bundle modules 1-14 bundle modules 1 14 bundlemodules114",
                        "moduleId": "619620e4e5d291b4f0606726",
                        "index": 0,
                        "title": "Bundle Modules 1-14",
                        "files": [
                            {
                                "label": "LectureNotesBundleModules1-14",
                                "extension": ".zip",
                                "mimetype": "application/zip",
                                "_id": "619620e4e5d291b4f0606811",
                                "updatedAt": "2022-01-25T10:22:00.704Z",
                                "createdAt": "2021-03-29T18:30:04.688Z",
                                "path": "assignment/619620e4e5d291b4f0606796/files"
                            }
                        ],
                        "createdAt": "2021-02-08T09:24:12.922Z",
                        "updatedAt": "2022-01-25T10:22:00.704Z",
                        "__v": 0,
                        "isOptional": true,
                        "keywords": [],
                        "publicKey": "c9nxd457hhz10srdt27i"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f060678f",
                        "visible": true,
                        "searchString": "Final Exam Logistics final exam logistics finalexamlogistics",
                        "moduleId": "619620e4e5d291b4f0606720",
                        "index": 2,
                        "title": "Final Exam Logistics",
                        "isOptional": true,
                        "files": [
                            {
                                "label": "finalexaminformation-update2021-04-12",
                                "extension": ".pdf",
                                "mimetype": "application/pdf",
                                "_id": "619620e4e5d291b4f0606803",
                                "updatedAt": "2022-01-25T10:22:00.664Z",
                                "createdAt": "2021-04-12T07:13:05.409Z",
                                "path": "assignment/619620e4e5d291b4f060678f/files"
                            },
                            {
                                "label": "finalexaminformation-update2021-04-14",
                                "extension": ".pdf",
                                "mimetype": "application/pdf",
                                "_id": "619620e4e5d291b4f0606804",
                                "updatedAt": "2022-01-25T10:22:00.664Z",
                                "createdAt": "2021-04-16T09:56:01.548Z",
                                "path": "assignment/619620e4e5d291b4f060678f/files"
                            }
                        ],
                        "createdAt": "2021-04-12T07:12:46.446Z",
                        "updatedAt": "2022-01-25T10:22:00.664Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "ukwazfheve6c9snhce9f"
                    },
                    {
                        "_id": "619620e4e5d291b4f060678e",
                        "visible": true,
                        "searchString": "Remote Exam Registration remote exam registration remoteexamregistration",
                        "moduleId": "619620e4e5d291b4f0606720",
                        "index": 1,
                        "title": "Remote Exam Registration",
                        "isOptional": true,
                        "files": [],
                        "createdAt": "2021-04-07T14:02:34.491Z",
                        "updatedAt": "2021-04-07T14:02:34.491Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "q1ld0ftgbh8zxl9vupts"
                    },
                    {
                        "_id": "619620e4e5d291b4f060678d",
                        "visible": true,
                        "searchString": "Last year's final exam last year's final exam last year s final exam lastyearsfinalexam last years final exam last year final exam",
                        "moduleId": "619620e4e5d291b4f0606720",
                        "index": 0,
                        "title": "Last year's final exam",
                        "files": [
                            {
                                "label": "finalexam",
                                "extension": ".pdf",
                                "mimetype": "application/pdf",
                                "_id": "619620e4e5d291b4f06067f7",
                                "updatedAt": "2022-01-25T10:22:00.677Z",
                                "createdAt": "2021-04-07T10:04:31.728Z",
                                "path": "assignment/619620e4e5d291b4f060678d/files"
                            },
                            {
                                "label": "time_series_covid19_confirmed_global_20200324",
                                "extension": ".csv",
                                "mimetype": "text/csv",
                                "_id": "619620e4e5d291b4f06067f8",
                                "updatedAt": "2022-01-25T10:22:00.677Z",
                                "createdAt": "2021-04-07T10:04:44.891Z",
                                "path": "assignment/619620e4e5d291b4f060678d/files"
                            },
                            {
                                "label": "OECD-ADIMA-Physical-Register",
                                "extension": ".csv",
                                "mimetype": "text/csv",
                                "_id": "619620e4e5d291b4f06067f9",
                                "updatedAt": "2022-01-25T10:22:00.677Z",
                                "createdAt": "2021-04-07T10:04:55.650Z",
                                "path": "assignment/619620e4e5d291b4f060678d/files"
                            },
                            {
                                "label": "email",
                                "extension": ".txt",
                                "mimetype": "text/plain",
                                "_id": "619620e4e5d291b4f06067fa",
                                "updatedAt": "2022-01-25T10:22:00.677Z",
                                "createdAt": "2021-04-07T11:05:03.509Z",
                                "path": "assignment/619620e4e5d291b4f060678d/files"
                            },
                            {
                                "label": "samplesolutionsbundle",
                                "extension": ".zip",
                                "mimetype": "application/zip",
                                "_id": "619620e4e5d291b4f06067fb",
                                "updatedAt": "2022-01-25T10:22:00.677Z",
                                "createdAt": "2021-04-08T14:18:50.903Z",
                                "path": "assignment/619620e4e5d291b4f060678d/files"
                            }
                        ],
                        "createdAt": "2021-04-07T09:59:04.079Z",
                        "updatedAt": "2022-01-25T10:22:00.677Z",
                        "__v": 0,
                        "isOptional": true,
                        "keywords": [],
                        "publicKey": "ettndqr5cwjxntuhokgd"
                    }
                ]
            },
            {
                "assignments": [
                    {
                        "_id": "619620e4e5d291b4f060679b",
                        "visible": true,
                        "searchString": "Last year's (repeat) midterm last year's (repeat) midterm last year s repeat midterm lastyearsrepeatmidterm last years (repeat) midterm last year (repeat) midterm",
                        "moduleId": "619620e4e5d291b4f0606733",
                        "index": 0,
                        "title": "Last year's (repeat) midterm",
                        "isOptional": true,
                        "files": [
                            {
                                "label": "midterm-repeat",
                                "extension": ".pdf",
                                "mimetype": "application/pdf",
                                "_id": "619620e4e5d291b4f060681f",
                                "updatedAt": "2022-01-25T10:22:00.718Z",
                                "createdAt": "2021-03-01T10:01:02.164Z",
                                "path": "assignment/619620e4e5d291b4f060679b/files"
                            },
                            {
                                "label": "assignment1-buggy",
                                "extension": ".py",
                                "mimetype": "text/x-python",
                                "_id": "619620e4e5d291b4f0606820",
                                "updatedAt": "2022-01-25T10:22:00.718Z",
                                "createdAt": "2021-03-01T16:09:10.251Z",
                                "path": "assignment/619620e4e5d291b4f060679b/files"
                            },
                            {
                                "label": "assignment2-buggy",
                                "extension": ".py",
                                "mimetype": "text/x-python",
                                "_id": "619620e4e5d291b4f0606821",
                                "updatedAt": "2022-01-25T10:22:00.718Z",
                                "createdAt": "2021-03-01T16:09:13.786Z",
                                "path": "assignment/619620e4e5d291b4f060679b/files"
                            }
                        ],
                        "createdAt": "2021-03-01T10:00:29.827Z",
                        "updatedAt": "2022-01-25T10:22:00.718Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "ucif8nivebu5y0e2nfxv"
                    },
                    {
                        "_id": "619620e4e5d291b4f060679f",
                        "visible": true,
                        "searchString": "MasteryGrids online tutor masterygrids online tutor masterygridsonlinetutor",
                        "moduleId": "619620e4e5d291b4f0606733",
                        "index": 4,
                        "title": "MasteryGrids online tutor",
                        "isOptional": true,
                        "files": [],
                        "createdAt": "2021-03-03T07:05:42.089Z",
                        "updatedAt": "2021-03-03T07:05:42.089Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "chdicdxc09ihk5kl9z7m"
                    },
                    {
                        "_id": "619620e4e5d291b4f060679c",
                        "visible": true,
                        "searchString": "Additional Exercises (by Casper Kaandorp): Set 1 additional exercises (by casper kaandorp): set 1 additional exercises by casper kaandorp set 1 additionalexercisesbycasperkaandorpset1",
                        "moduleId": "619620e4e5d291b4f0606733",
                        "index": 1,
                        "title": "Additional Exercises (by Casper Kaandorp): Set 1",
                        "files": [
                            {
                                "label": "hollow_cylinder",
                                "extension": ".png",
                                "mimetype": "image/png",
                                "cropX": 0,
                                "cropY": 0,
                                "cropWidth": 559,
                                "cropHeight": 735,
                                "_id": "619620e4e5d291b4f0606826",
                                "updatedAt": "2022-01-25T10:22:00.759Z",
                                "createdAt": "2020-09-07T19:42:00.658Z",
                                "path": "assignment/619620e4e5d291b4f060679c/files"
                            }
                        ],
                        "createdAt": "2021-03-01T10:09:12.727Z",
                        "updatedAt": "2022-11-23T06:13:40.848Z",
                        "__v": 0,
                        "isOptional": true,
                        "introduction": "These exercises were kindly shared by Casper Kaandorp, who developed them for his Python course. They might be useful for additional practice before the CoTaPP midterm.",
                        "keywords": [],
                        "publicKey": "61arvk84wbou3wnp0br1",
                        "hasIntroduction": true
                    },
                    {
                        "_id": "619620e4e5d291b4f060679d",
                        "visible": true,
                        "searchString": "Additional Exercises (by Casper Kaandorp): Set 2 additional exercises (by casper kaandorp): set 2 additional exercises by casper kaandorp set 2 additionalexercisesbycasperkaandorpset2",
                        "moduleId": "619620e4e5d291b4f0606733",
                        "index": 2,
                        "title": "Additional Exercises (by Casper Kaandorp): Set 2",
                        "isOptional": true,
                        "files": [],
                        "createdAt": "2021-03-01T10:20:17.944Z",
                        "updatedAt": "2022-11-23T06:13:40.913Z",
                        "__v": 0,
                        "introduction": "These exercises were kindly shared by Casper Kaandorp, who developed them for his Python course. They might be useful for additional practice before the CoTaPP midterm.",
                        "keywords": [],
                        "publicKey": "h3tcy3y9sfrowktuiz1a",
                        "hasIntroduction": true
                    },
                    {
                        "_id": "619620e4e5d291b4f060679e",
                        "visible": true,
                        "searchString": "Additional Exercises (by Casper Kaandorp): Set 3 additional exercises (by casper kaandorp): set 3 additional exercises by casper kaandorp set 3 additionalexercisesbycasperkaandorpset3",
                        "moduleId": "619620e4e5d291b4f0606733",
                        "index": 3,
                        "title": "Additional Exercises (by Casper Kaandorp): Set 3",
                        "isOptional": true,
                        "files": [],
                        "createdAt": "2021-03-01T10:28:50.495Z",
                        "updatedAt": "2022-11-23T06:13:40.980Z",
                        "__v": 0,
                        "introduction": "These exercises were kindly shared by Casper Kaandorp, who developed them for his Python course. They might be useful for additional practice before the CoTaPP midterm.",
                        "keywords": [],
                        "publicKey": "4jkim1s3o2qeokpefcu1",
                        "hasIntroduction": true
                    },
                    {
                        "_id": "619620e4e5d291b4f06067a0",
                        "visible": true,
                        "searchString": "Midterm CoTaPP 2021 first two pages midterm cotapp 2021 first two pages midtermcotapp2021firsttwopages",
                        "moduleId": "619620e4e5d291b4f0606733",
                        "index": 5,
                        "title": "Midterm CoTaPP 2021 first two pages",
                        "isOptional": true,
                        "files": [
                            {
                                "label": "midterm-firsttwopages",
                                "extension": ".pdf",
                                "mimetype": "application/pdf",
                                "_id": "619620e4e5d291b4f060682c",
                                "updatedAt": "2022-01-25T10:22:00.813Z",
                                "createdAt": "2021-03-08T18:27:22.484Z",
                                "path": "assignment/619620e4e5d291b4f06067a0/files"
                            }
                        ],
                        "createdAt": "2021-03-08T18:27:03.372Z",
                        "updatedAt": "2022-01-25T10:22:00.813Z",
                        "__v": 0,
                        "keywords": [],
                        "publicKey": "s8xmmp20cejxbasw9kq8"
                    }
                ]
            }
        ],
        "_id": "619620e3e5d291b4f06066d2",
        "library": false,
        "analyticsBlocks": [
            "619620e4e5d291b4f06066d5",
            "619620e4e5d291b4f06066d6",
            "6225e010b8819a6df5544a0a",
            "6225ec2578efbd44bdf2721c",
            "619620e4e5d291b4f06066db",
            "619620e4e5d291b4f06066dc",
            "619620e4e5d291b4f06066dd",
            "619620e4e5d291b4f06066de",
            "619620e4e5d291b4f06066df"
        ],
        "archived": false,
        "demo": false,
        "visible": false,
        "organizationId": "5db2f52467230ad36e8c3cdc",
        "title": "CoTaPP 2021-2022",
        "code": "BETA-B1PYT, INFOB2PWD, INFOMCTH",
        "createdAt": "2020-12-15T07:48:11.511Z",
        "updatedAt": "2022-10-25T13:57:03.618Z",
        "__v": 10,
        "selectedImage": "custom",
        "image": {
            "label": "python-4785225_1280.jpg",
            "extension": ".jpg",
            "mimetype": "image/jpeg",
            "cropX": 140,
            "cropY": 0,
            "cropWidth": 1139,
            "cropHeight": 640,
            "_id": "619620e3e5d291b4f06066d3",
            "updatedAt": "2022-01-25T10:22:06.499Z",
            "createdAt": "2021-01-27T09:03:09.184Z",
            "path": "course/619620e3e5d291b4f06066d2"
        },
        "startDate": "2022-02-07T07:30:00.000Z",
        "analyticsNeedRecompute": false
    }
]
